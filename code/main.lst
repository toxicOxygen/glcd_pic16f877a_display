CCS PCM C Compiler, Version 5.007, 61971               06-Jan-21 19:44

               Filename:   C:\Users\Kwaku\Desktop\kumbaya\code\main.lst

               ROM used:   4701 words (57%)
                           Largest free fragment is 2048
               RAM used:   26 (7%) at main() level
                           51 (14%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   5AF
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDLW  0B
0008:  BTFSC  03.0
0009:  INCF   0A,F
000A:  MOVWF  02
000B:  RETLW  00
000C:  RETLW  00
000D:  RETLW  00
000E:  RETLW  00
000F:  RETLW  00
0010:  RETLW  00
0011:  RETLW  00
0012:  RETLW  5F
0013:  RETLW  00
0014:  RETLW  00
0015:  RETLW  00
0016:  RETLW  03
0017:  RETLW  00
0018:  RETLW  03
0019:  RETLW  00
001A:  RETLW  14
001B:  RETLW  3E
001C:  RETLW  14
001D:  RETLW  3E
001E:  RETLW  14
001F:  RETLW  24
0020:  RETLW  2A
0021:  RETLW  7F
0022:  RETLW  2A
0023:  RETLW  12
0024:  RETLW  43
0025:  RETLW  33
0026:  RETLW  08
0027:  RETLW  66
0028:  RETLW  61
0029:  RETLW  36
002A:  RETLW  49
002B:  RETLW  55
002C:  RETLW  22
002D:  RETLW  50
002E:  RETLW  00
002F:  RETLW  05
0030:  RETLW  03
0031:  RETLW  00
0032:  RETLW  00
0033:  RETLW  00
0034:  RETLW  1C
0035:  RETLW  22
0036:  RETLW  41
0037:  RETLW  00
0038:  RETLW  00
0039:  RETLW  41
003A:  RETLW  22
003B:  RETLW  1C
003C:  RETLW  00
003D:  RETLW  14
003E:  RETLW  08
003F:  RETLW  3E
0040:  RETLW  08
0041:  RETLW  14
0042:  RETLW  08
0043:  RETLW  08
0044:  RETLW  3E
0045:  RETLW  08
0046:  RETLW  08
0047:  RETLW  00
0048:  RETLW  50
0049:  RETLW  30
004A:  RETLW  00
004B:  RETLW  00
004C:  RETLW  08
004D:  RETLW  08
004E:  RETLW  08
004F:  RETLW  08
0050:  RETLW  08
0051:  RETLW  00
0052:  RETLW  60
0053:  RETLW  60
0054:  RETLW  00
0055:  RETLW  00
0056:  RETLW  20
0057:  RETLW  10
0058:  RETLW  08
0059:  RETLW  04
005A:  RETLW  02
005B:  RETLW  3E
005C:  RETLW  51
005D:  RETLW  49
005E:  RETLW  45
005F:  RETLW  3E
0060:  RETLW  00
0061:  RETLW  04
0062:  RETLW  02
0063:  RETLW  7F
0064:  RETLW  00
0065:  RETLW  42
0066:  RETLW  61
0067:  RETLW  51
0068:  RETLW  49
0069:  RETLW  46
006A:  RETLW  22
006B:  RETLW  41
006C:  RETLW  49
006D:  RETLW  49
006E:  RETLW  36
006F:  RETLW  18
0070:  RETLW  14
0071:  RETLW  12
0072:  RETLW  7F
0073:  RETLW  10
0074:  RETLW  27
0075:  RETLW  45
0076:  RETLW  45
0077:  RETLW  45
0078:  RETLW  39
0079:  RETLW  3E
007A:  RETLW  49
007B:  RETLW  49
007C:  RETLW  49
007D:  RETLW  32
007E:  RETLW  01
007F:  RETLW  01
0080:  RETLW  71
0081:  RETLW  09
0082:  RETLW  07
0083:  RETLW  36
0084:  RETLW  49
0085:  RETLW  49
0086:  RETLW  49
0087:  RETLW  36
0088:  RETLW  26
0089:  RETLW  49
008A:  RETLW  49
008B:  RETLW  49
008C:  RETLW  3E
008D:  RETLW  00
008E:  RETLW  36
008F:  RETLW  36
0090:  RETLW  00
0091:  RETLW  00
0092:  RETLW  00
0093:  RETLW  56
0094:  RETLW  36
0095:  RETLW  00
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  14
0099:  RETLW  22
009A:  RETLW  41
009B:  RETLW  00
009C:  RETLW  14
009D:  RETLW  14
009E:  RETLW  14
009F:  RETLW  14
00A0:  RETLW  14
00A1:  RETLW  00
00A2:  RETLW  41
00A3:  RETLW  22
00A4:  RETLW  14
00A5:  RETLW  08
00A6:  RETLW  02
00A7:  RETLW  01
00A8:  RETLW  51
00A9:  RETLW  09
00AA:  RETLW  06
00AB:  RETLW  3E
00AC:  RETLW  41
00AD:  RETLW  59
00AE:  RETLW  55
00AF:  RETLW  5E
00B0:  RETLW  7E
00B1:  RETLW  09
00B2:  RETLW  09
00B3:  RETLW  09
00B4:  RETLW  7E
00B5:  RETLW  7F
00B6:  RETLW  49
00B7:  RETLW  49
00B8:  RETLW  49
00B9:  RETLW  36
00BA:  RETLW  3E
00BB:  RETLW  41
00BC:  RETLW  41
00BD:  RETLW  41
00BE:  RETLW  22
00BF:  RETLW  7F
00C0:  RETLW  41
00C1:  RETLW  41
00C2:  RETLW  41
00C3:  RETLW  3E
00C4:  RETLW  7F
00C5:  RETLW  49
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  41
00C9:  RETLW  7F
00CA:  RETLW  09
00CB:  RETLW  09
00CC:  RETLW  09
00CD:  RETLW  01
00CE:  RETLW  3E
00CF:  RETLW  41
00D0:  RETLW  41
00D1:  RETLW  49
00D2:  RETLW  3A
00D3:  RETLW  7F
00D4:  RETLW  08
00D5:  RETLW  08
00D6:  RETLW  08
00D7:  RETLW  7F
00D8:  RETLW  00
00D9:  RETLW  41
00DA:  RETLW  7F
00DB:  RETLW  41
00DC:  RETLW  00
00DD:  RETLW  30
00DE:  RETLW  40
00DF:  RETLW  40
00E0:  RETLW  40
00E1:  RETLW  3F
00E2:  RETLW  7F
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  7F
00E8:  RETLW  40
00E9:  RETLW  40
00EA:  RETLW  40
00EB:  RETLW  40
00EC:  RETLW  7F
00ED:  RETLW  02
00EE:  RETLW  0C
00EF:  RETLW  02
00F0:  RETLW  7F
00F1:  RETLW  7F
00F2:  RETLW  02
00F3:  RETLW  04
00F4:  RETLW  08
00F5:  RETLW  7F
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  41
00F9:  RETLW  41
00FA:  RETLW  3E
00FB:  RETLW  7F
00FC:  RETLW  09
00FD:  RETLW  09
00FE:  RETLW  09
00FF:  RETLW  06
0100:  RETLW  1E
0101:  RETLW  21
0102:  RETLW  21
0103:  RETLW  21
0104:  RETLW  5E
0105:  RETLW  7F
0106:  RETLW  09
0107:  RETLW  09
0108:  RETLW  09
0109:  RETLW  76
010A:  BSF    0A.0
010B:  BCF    0A.1
010C:  BCF    0A.2
010D:  ADDWF  02,F
010E:  RETLW  26
010F:  RETLW  49
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  32
0113:  RETLW  01
0114:  RETLW  01
0115:  RETLW  7F
0116:  RETLW  01
0117:  RETLW  01
0118:  RETLW  3F
0119:  RETLW  40
011A:  RETLW  40
011B:  RETLW  40
011C:  RETLW  3F
011D:  RETLW  1F
011E:  RETLW  20
011F:  RETLW  40
0120:  RETLW  20
0121:  RETLW  1F
0122:  RETLW  7F
0123:  RETLW  20
0124:  RETLW  10
0125:  RETLW  20
0126:  RETLW  7F
0127:  RETLW  41
0128:  RETLW  22
0129:  RETLW  1C
012A:  RETLW  22
012B:  RETLW  41
012C:  RETLW  07
012D:  RETLW  08
012E:  RETLW  70
012F:  RETLW  08
0130:  RETLW  07
0131:  RETLW  61
0132:  RETLW  51
0133:  RETLW  49
0134:  RETLW  45
0135:  RETLW  43
0136:  RETLW  00
0137:  RETLW  7F
0138:  RETLW  41
0139:  RETLW  00
013A:  RETLW  00
013B:  RETLW  02
013C:  RETLW  04
013D:  RETLW  08
013E:  RETLW  10
013F:  RETLW  20
0140:  RETLW  00
0141:  RETLW  00
0142:  RETLW  41
0143:  RETLW  7F
0144:  RETLW  00
0145:  RETLW  04
0146:  RETLW  02
0147:  RETLW  01
0148:  RETLW  02
0149:  RETLW  04
014A:  RETLW  40
014B:  RETLW  40
014C:  RETLW  40
014D:  RETLW  40
014E:  RETLW  40
014F:  RETLW  00
0150:  RETLW  01
0151:  RETLW  02
0152:  RETLW  04
0153:  RETLW  00
0154:  RETLW  20
0155:  RETLW  54
0156:  RETLW  54
0157:  RETLW  54
0158:  RETLW  78
0159:  RETLW  7F
015A:  RETLW  44
015B:  RETLW  44
015C:  RETLW  44
015D:  RETLW  38
015E:  RETLW  38
015F:  RETLW  44
0160:  RETLW  44
0161:  RETLW  44
0162:  RETLW  44
0163:  RETLW  38
0164:  RETLW  44
0165:  RETLW  44
0166:  RETLW  44
0167:  RETLW  7F
0168:  RETLW  38
0169:  RETLW  54
016A:  RETLW  54
016B:  RETLW  54
016C:  RETLW  18
016D:  RETLW  04
016E:  RETLW  04
016F:  RETLW  7E
0170:  RETLW  05
0171:  RETLW  05
0172:  RETLW  08
0173:  RETLW  54
0174:  RETLW  54
0175:  RETLW  54
0176:  RETLW  3C
0177:  RETLW  7F
0178:  RETLW  08
0179:  RETLW  04
017A:  RETLW  04
017B:  RETLW  78
017C:  RETLW  00
017D:  RETLW  44
017E:  RETLW  7D
017F:  RETLW  40
0180:  RETLW  00
0181:  RETLW  20
0182:  RETLW  40
0183:  RETLW  44
0184:  RETLW  3D
0185:  RETLW  00
0186:  RETLW  7F
0187:  RETLW  10
0188:  RETLW  28
0189:  RETLW  44
018A:  RETLW  00
018B:  RETLW  00
018C:  RETLW  41
018D:  RETLW  7F
018E:  RETLW  40
018F:  RETLW  00
0190:  RETLW  7C
0191:  RETLW  04
0192:  RETLW  78
0193:  RETLW  04
0194:  RETLW  78
0195:  RETLW  7C
0196:  RETLW  08
0197:  RETLW  04
0198:  RETLW  04
0199:  RETLW  78
019A:  RETLW  38
019B:  RETLW  44
019C:  RETLW  44
019D:  RETLW  44
019E:  RETLW  38
019F:  RETLW  7C
01A0:  RETLW  14
01A1:  RETLW  14
01A2:  RETLW  14
01A3:  RETLW  08
01A4:  RETLW  08
01A5:  RETLW  14
01A6:  RETLW  14
01A7:  RETLW  14
01A8:  RETLW  7C
01A9:  RETLW  00
01AA:  RETLW  7C
01AB:  RETLW  08
01AC:  RETLW  04
01AD:  RETLW  04
01AE:  RETLW  48
01AF:  RETLW  54
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  20
01B3:  RETLW  04
01B4:  RETLW  04
01B5:  RETLW  3F
01B6:  RETLW  44
01B7:  RETLW  44
01B8:  RETLW  3C
01B9:  RETLW  40
01BA:  RETLW  40
01BB:  RETLW  20
01BC:  RETLW  7C
01BD:  RETLW  1C
01BE:  RETLW  20
01BF:  RETLW  40
01C0:  RETLW  20
01C1:  RETLW  1C
01C2:  RETLW  3C
01C3:  RETLW  40
01C4:  RETLW  30
01C5:  RETLW  40
01C6:  RETLW  3C
01C7:  RETLW  44
01C8:  RETLW  28
01C9:  RETLW  10
01CA:  RETLW  28
01CB:  RETLW  44
01CC:  RETLW  0C
01CD:  RETLW  50
01CE:  RETLW  50
01CF:  RETLW  50
01D0:  RETLW  3C
01D1:  RETLW  44
01D2:  RETLW  64
01D3:  RETLW  54
01D4:  RETLW  4C
01D5:  RETLW  44
01D6:  RETLW  00
01D7:  RETLW  08
01D8:  RETLW  36
01D9:  RETLW  41
01DA:  RETLW  41
01DB:  RETLW  00
01DC:  RETLW  00
01DD:  RETLW  7F
01DE:  RETLW  00
01DF:  RETLW  00
01E0:  RETLW  41
01E1:  RETLW  41
01E2:  RETLW  36
01E3:  RETLW  08
01E4:  RETLW  00
01E5:  RETLW  02
01E6:  RETLW  01
01E7:  RETLW  02
01E8:  RETLW  04
01E9:  RETLW  02
01EA:  MOVWF  7B
01EB:  MOVLW  01
01EC:  ADDWF  7A,W
01ED:  MOVWF  0A
01EE:  MOVF   7B,W
01EF:  ADDLW  F3
01F0:  BTFSC  03.0
01F1:  INCF   0A,F
01F2:  MOVWF  02
01F3:  RETLW  FF
01F4:  RETLW  FF
01F5:  RETLW  FF
01F6:  RETLW  FF
01F7:  RETLW  FF
01F8:  RETLW  FF
01F9:  RETLW  FF
01FA:  RETLW  FF
01FB:  RETLW  FF
01FC:  RETLW  FF
01FD:  RETLW  FF
01FE:  RETLW  FF
01FF:  RETLW  FF
0200:  RETLW  FF
0201:  RETLW  FF
0202:  RETLW  FF
0203:  RETLW  FF
0204:  RETLW  FF
0205:  RETLW  FF
0206:  RETLW  FF
0207:  RETLW  FF
0208:  RETLW  FF
0209:  RETLW  FF
020A:  RETLW  FF
020B:  RETLW  FF
020C:  RETLW  FF
020D:  RETLW  FF
020E:  RETLW  FF
020F:  RETLW  FF
0210:  RETLW  FF
0211:  RETLW  FF
0212:  RETLW  FF
0213:  RETLW  FF
0214:  RETLW  FF
0215:  RETLW  FF
0216:  RETLW  FF
0217:  RETLW  FF
0218:  RETLW  FF
0219:  RETLW  FF
021A:  RETLW  FF
021B:  RETLW  FF
021C:  RETLW  FF
021D:  RETLW  FF
021E:  RETLW  FF
021F:  RETLW  FF
0220:  RETLW  FF
0221:  RETLW  FF
0222:  RETLW  FF
0223:  RETLW  FF
0224:  RETLW  FF
0225:  RETLW  FF
0226:  RETLW  FF
0227:  RETLW  FF
0228:  RETLW  FF
0229:  RETLW  FF
022A:  RETLW  FF
022B:  RETLW  FF
022C:  RETLW  FF
022D:  RETLW  FF
022E:  RETLW  FF
022F:  RETLW  FF
0230:  RETLW  FF
0231:  RETLW  FF
0232:  RETLW  FF
0233:  RETLW  FF
0234:  RETLW  FF
0235:  RETLW  FF
0236:  RETLW  FF
0237:  RETLW  FF
0238:  RETLW  FF
0239:  RETLW  FF
023A:  RETLW  FF
023B:  RETLW  FF
023C:  RETLW  FF
023D:  RETLW  FF
023E:  RETLW  FF
023F:  RETLW  FF
0240:  RETLW  FF
0241:  RETLW  FF
0242:  RETLW  7F
0243:  RETLW  7F
0244:  RETLW  3F
0245:  RETLW  3F
0246:  RETLW  3F
0247:  RETLW  1F
0248:  RETLW  1F
0249:  RETLW  1F
024A:  RETLW  1F
024B:  RETLW  0F
024C:  RETLW  0F
024D:  RETLW  0F
024E:  RETLW  0F
024F:  RETLW  0F
0250:  RETLW  0F
0251:  RETLW  0F
0252:  RETLW  0F
0253:  RETLW  0F
0254:  RETLW  0F
0255:  RETLW  0F
0256:  RETLW  0F
0257:  RETLW  0F
0258:  RETLW  0F
0259:  RETLW  0F
025A:  RETLW  0F
025B:  RETLW  1F
025C:  RETLW  1F
025D:  RETLW  1F
025E:  RETLW  3F
025F:  RETLW  3F
0260:  RETLW  3F
0261:  RETLW  7F
0262:  RETLW  7F
0263:  RETLW  FF
0264:  RETLW  FF
0265:  RETLW  FF
0266:  RETLW  FF
0267:  RETLW  FF
0268:  RETLW  FF
0269:  RETLW  FF
026A:  RETLW  FF
026B:  RETLW  FF
026C:  RETLW  FF
026D:  RETLW  FF
026E:  RETLW  FF
026F:  RETLW  FF
0270:  RETLW  FF
0271:  RETLW  FF
0272:  RETLW  FF
0273:  RETLW  FF
0274:  RETLW  FF
0275:  RETLW  FF
0276:  RETLW  FF
0277:  RETLW  FF
0278:  RETLW  FF
0279:  RETLW  FF
027A:  RETLW  FF
027B:  RETLW  FF
027C:  RETLW  FF
027D:  RETLW  FF
027E:  RETLW  FF
027F:  RETLW  FF
0280:  RETLW  FF
0281:  RETLW  FF
0282:  RETLW  FF
0283:  RETLW  FF
0284:  RETLW  FF
0285:  RETLW  7F
0286:  RETLW  3F
0287:  RETLW  1F
0288:  RETLW  1F
0289:  RETLW  0F
028A:  RETLW  0F
028B:  RETLW  0F
028C:  RETLW  07
028D:  RETLW  07
028E:  RETLW  07
028F:  RETLW  07
0290:  RETLW  03
0291:  RETLW  03
0292:  RETLW  03
0293:  RETLW  03
0294:  RETLW  03
0295:  RETLW  03
0296:  RETLW  03
0297:  RETLW  07
0298:  RETLW  07
0299:  RETLW  07
029A:  RETLW  07
029B:  RETLW  0F
029C:  RETLW  0F
029D:  RETLW  0F
029E:  RETLW  1F
029F:  RETLW  1F
02A0:  RETLW  3F
02A1:  RETLW  7F
02A2:  RETLW  7F
02A3:  RETLW  FF
02A4:  RETLW  FF
02A5:  RETLW  FF
02A6:  RETLW  FF
02A7:  RETLW  FF
02A8:  RETLW  FF
02A9:  RETLW  FF
02AA:  RETLW  FF
02AB:  RETLW  FF
02AC:  RETLW  FF
02AD:  RETLW  FF
02AE:  RETLW  FF
02AF:  RETLW  FF
02B0:  RETLW  FF
02B1:  RETLW  FF
02B2:  RETLW  FF
02B3:  RETLW  FF
02B4:  RETLW  FF
02B5:  RETLW  FF
02B6:  RETLW  FF
02B7:  RETLW  FF
02B8:  RETLW  FF
02B9:  RETLW  7F
02BA:  RETLW  1F
02BB:  RETLW  0F
02BC:  RETLW  07
02BD:  RETLW  07
02BE:  RETLW  03
02BF:  RETLW  01
02C0:  RETLW  00
02C1:  RETLW  00
02C2:  RETLW  00
02C3:  RETLW  00
02C4:  RETLW  00
02C5:  RETLW  00
02C6:  RETLW  00
02C7:  RETLW  00
02C8:  RETLW  00
02C9:  RETLW  00
02CA:  RETLW  00
02CB:  RETLW  00
02CC:  RETLW  00
02CD:  RETLW  00
02CE:  RETLW  00
02CF:  RETLW  00
02D0:  RETLW  00
02D1:  RETLW  00
02D2:  RETLW  00
02D3:  RETLW  00
02D4:  RETLW  00
02D5:  RETLW  00
02D6:  RETLW  00
02D7:  RETLW  00
02D8:  RETLW  00
02D9:  RETLW  00
02DA:  RETLW  00
02DB:  RETLW  00
02DC:  RETLW  00
02DD:  RETLW  00
02DE:  RETLW  00
02DF:  RETLW  00
02E0:  RETLW  00
02E1:  RETLW  00
02E2:  RETLW  00
02E3:  RETLW  00
02E4:  RETLW  00
02E5:  RETLW  01
02E6:  RETLW  03
02E7:  RETLW  07
02E8:  RETLW  07
02E9:  RETLW  0F
02EA:  RETLW  3F
02EB:  RETLW  FF
02EC:  RETLW  FF
02ED:  RETLW  FF
02EE:  RETLW  FF
02EF:  RETLW  FF
02F0:  RETLW  FF
02F1:  RETLW  FF
02F2:  RETLW  FF
02F3:  RETLW  FF
02F4:  RETLW  FF
02F5:  RETLW  FF
02F6:  RETLW  FF
02F7:  RETLW  FF
02F8:  RETLW  FF
02F9:  RETLW  FF
02FA:  RETLW  FF
02FB:  RETLW  FF
02FC:  RETLW  FF
02FD:  RETLW  FF
02FE:  RETLW  FF
02FF:  RETLW  3F
0300:  RETLW  0F
0301:  RETLW  07
0302:  RETLW  01
0303:  RETLW  00
0304:  RETLW  00
0305:  RETLW  00
0306:  RETLW  00
0307:  RETLW  80
0308:  RETLW  80
0309:  RETLW  C0
030A:  RETLW  C0
030B:  RETLW  C0
030C:  RETLW  E0
030D:  RETLW  60
030E:  RETLW  60
030F:  RETLW  20
0310:  RETLW  30
0311:  RETLW  30
0312:  RETLW  30
0313:  RETLW  30
0314:  RETLW  30
0315:  RETLW  30
0316:  RETLW  30
0317:  RETLW  30
0318:  RETLW  60
0319:  RETLW  60
031A:  RETLW  E0
031B:  RETLW  E0
031C:  RETLW  C0
031D:  RETLW  C0
031E:  RETLW  80
031F:  RETLW  80
0320:  RETLW  00
0321:  RETLW  00
0322:  RETLW  00
0323:  RETLW  00
0324:  RETLW  01
0325:  RETLW  03
0326:  RETLW  0F
0327:  RETLW  1F
0328:  RETLW  7F
0329:  RETLW  FF
032A:  RETLW  FF
032B:  RETLW  FF
032C:  RETLW  FF
032D:  RETLW  FF
032E:  RETLW  FF
032F:  RETLW  FF
0330:  RETLW  FF
0331:  RETLW  FF
0332:  RETLW  FF
0333:  RETLW  FF
0334:  RETLW  FF
0335:  RETLW  1F
0336:  RETLW  07
0337:  RETLW  03
0338:  RETLW  00
0339:  RETLW  00
033A:  RETLW  00
033B:  RETLW  00
033C:  RETLW  00
033D:  RETLW  00
033E:  RETLW  00
033F:  RETLW  00
0340:  RETLW  00
0341:  RETLW  00
0342:  RETLW  00
0343:  RETLW  00
0344:  RETLW  00
0345:  RETLW  00
0346:  RETLW  00
0347:  RETLW  00
0348:  RETLW  00
0349:  RETLW  00
034A:  RETLW  00
034B:  RETLW  00
034C:  RETLW  80
034D:  RETLW  80
034E:  RETLW  C0
034F:  RETLW  C0
0350:  RETLW  C0
0351:  RETLW  C0
0352:  RETLW  C0
0353:  RETLW  C0
0354:  RETLW  C0
0355:  RETLW  80
0356:  RETLW  00
0357:  RETLW  00
0358:  RETLW  00
0359:  RETLW  00
035A:  RETLW  00
035B:  RETLW  00
035C:  RETLW  00
035D:  RETLW  00
035E:  RETLW  00
035F:  RETLW  00
0360:  RETLW  00
0361:  RETLW  00
0362:  RETLW  00
0363:  RETLW  00
0364:  RETLW  00
0365:  RETLW  00
0366:  RETLW  00
0367:  RETLW  00
0368:  RETLW  00
0369:  RETLW  00
036A:  RETLW  00
036B:  RETLW  03
036C:  RETLW  FF
036D:  RETLW  FF
036E:  RETLW  FF
036F:  RETLW  FF
0370:  RETLW  FF
0371:  RETLW  FF
0372:  RETLW  FF
0373:  RETLW  FF
0374:  RETLW  FF
0375:  RETLW  FF
0376:  RETLW  FF
0377:  RETLW  FF
0378:  RETLW  FF
0379:  RETLW  FF
037A:  RETLW  FF
037B:  RETLW  FF
037C:  RETLW  FF
037D:  RETLW  03
037E:  RETLW  80
037F:  RETLW  E0
0380:  RETLW  E0
0381:  RETLW  F0
0382:  RETLW  F8
0383:  RETLW  FC
0384:  RETLW  FE
0385:  RETLW  FE
0386:  RETLW  FF
0387:  RETLW  FF
0388:  RETLW  FF
0389:  RETLW  0F
038A:  RETLW  03
038B:  RETLW  01
038C:  RETLW  00
038D:  RETLW  00
038E:  RETLW  00
038F:  RETLW  00
0390:  RETLW  00
0391:  RETLW  00
0392:  RETLW  00
0393:  RETLW  00
0394:  RETLW  00
0395:  RETLW  00
0396:  RETLW  00
0397:  RETLW  00
0398:  RETLW  00
0399:  RETLW  00
039A:  RETLW  00
039B:  RETLW  01
039C:  RETLW  03
039D:  RETLW  0F
039E:  RETLW  FF
039F:  RETLW  FF
03A0:  RETLW  FF
03A1:  RETLW  FF
03A2:  RETLW  FE
03A3:  RETLW  FC
03A4:  RETLW  FC
03A5:  RETLW  F8
03A6:  RETLW  F0
03A7:  RETLW  E0
03A8:  RETLW  80
03A9:  RETLW  03
03AA:  RETLW  FF
03AB:  RETLW  FF
03AC:  RETLW  FF
03AD:  RETLW  FF
03AE:  RETLW  FF
03AF:  RETLW  FF
03B0:  RETLW  FF
03B1:  RETLW  FF
03B2:  RETLW  FF
03B3:  RETLW  E7
03B4:  RETLW  E0
03B5:  RETLW  E0
03B6:  RETLW  E0
03B7:  RETLW  E0
03B8:  RETLW  E0
03B9:  RETLW  E0
03BA:  RETLW  E0
03BB:  RETLW  E0
03BC:  RETLW  E0
03BD:  RETLW  E0
03BE:  RETLW  E0
03BF:  RETLW  E0
03C0:  RETLW  E0
03C1:  RETLW  E0
03C2:  RETLW  E0
03C3:  RETLW  E0
03C4:  RETLW  E0
03C5:  RETLW  E0
03C6:  RETLW  E0
03C7:  RETLW  E0
03C8:  RETLW  E0
03C9:  RETLW  FC
03CA:  RETLW  FE
03CB:  RETLW  FF
03CC:  RETLW  FF
03CD:  RETLW  FF
03CE:  RETLW  FF
03CF:  RETLW  FF
03D0:  RETLW  FF
03D1:  RETLW  FF
03D2:  RETLW  FF
03D3:  RETLW  7F
03D4:  RETLW  3F
03D5:  RETLW  1F
03D6:  RETLW  06
03D7:  RETLW  00
03D8:  RETLW  00
03D9:  RETLW  00
03DA:  RETLW  00
03DB:  RETLW  00
03DC:  RETLW  00
03DD:  RETLW  00
03DE:  RETLW  00
03DF:  RETLW  00
03E0:  RETLW  00
03E1:  RETLW  00
03E2:  RETLW  00
03E3:  RETLW  00
03E4:  RETLW  00
03E5:  RETLW  00
03E6:  RETLW  00
03E7:  RETLW  00
03E8:  RETLW  00
03E9:  RETLW  80
03EA:  RETLW  E0
03EB:  RETLW  FE
03EC:  RETLW  FF
03ED:  RETLW  FF
03EE:  RETLW  FF
03EF:  RETLW  FF
03F0:  RETLW  FF
03F1:  RETLW  FF
03F2:  RETLW  FF
03F3:  RETLW  FF
03F4:  RETLW  FF
03F5:  RETLW  FF
03F6:  RETLW  FF
03F7:  RETLW  FF
03F8:  RETLW  FF
03F9:  RETLW  FF
03FA:  RETLW  FF
03FB:  RETLW  FF
03FC:  RETLW  FF
03FD:  RETLW  E0
03FE:  RETLW  01
03FF:  RETLW  03
0400:  RETLW  07
0401:  RETLW  0F
0402:  RETLW  1F
0403:  RETLW  1F
0404:  RETLW  3F
0405:  RETLW  7F
0406:  RETLW  7F
0407:  RETLW  FF
0408:  RETLW  FF
0409:  RETLW  F8
040A:  RETLW  E0
040B:  RETLW  C0
040C:  RETLW  80
040D:  RETLW  00
040E:  RETLW  00
040F:  RETLW  00
0410:  RETLW  00
0411:  RETLW  00
0412:  RETLW  00
0413:  RETLW  00
0414:  RETLW  00
0415:  RETLW  00
0416:  RETLW  00
0417:  RETLW  00
0418:  RETLW  00
0419:  RETLW  00
041A:  RETLW  80
041B:  RETLW  80
041C:  RETLW  E0
041D:  RETLW  F0
041E:  RETLW  FF
041F:  RETLW  FF
0420:  RETLW  7F
0421:  RETLW  7F
0422:  RETLW  3F
0423:  RETLW  1F
0424:  RETLW  1F
0425:  RETLW  0F
0426:  RETLW  07
0427:  RETLW  03
0428:  RETLW  01
0429:  RETLW  E0
042A:  RETLW  FF
042B:  RETLW  FF
042C:  RETLW  FF
042D:  RETLW  FF
042E:  RETLW  FF
042F:  RETLW  FF
0430:  RETLW  FF
0431:  RETLW  FF
0432:  RETLW  FF
0433:  RETLW  FF
0434:  RETLW  FF
0435:  RETLW  FF
0436:  RETLW  FF
0437:  RETLW  FF
0438:  RETLW  FF
0439:  RETLW  FF
043A:  RETLW  FF
043B:  RETLW  FF
043C:  RETLW  FF
043D:  RETLW  FF
043E:  RETLW  FF
043F:  RETLW  FF
0440:  RETLW  FF
0441:  RETLW  FF
0442:  RETLW  FF
0443:  RETLW  FF
0444:  RETLW  FF
0445:  RETLW  FF
0446:  RETLW  FF
0447:  RETLW  FF
0448:  RETLW  FF
0449:  RETLW  7F
044A:  RETLW  3F
044B:  RETLW  3F
044C:  RETLW  1F
044D:  RETLW  0F
044E:  RETLW  07
044F:  RETLW  03
0450:  RETLW  03
0451:  RETLW  01
0452:  RETLW  00
0453:  RETLW  00
0454:  RETLW  00
0455:  RETLW  00
0456:  RETLW  00
0457:  RETLW  00
0458:  RETLW  00
0459:  RETLW  00
045A:  RETLW  00
045B:  RETLW  00
045C:  RETLW  00
045D:  RETLW  00
045E:  RETLW  00
045F:  RETLW  00
0460:  RETLW  00
0461:  RETLW  00
0462:  RETLW  00
0463:  RETLW  80
0464:  RETLW  C0
0465:  RETLW  E0
0466:  RETLW  F0
0467:  RETLW  FC
0468:  RETLW  FE
0469:  RETLW  FF
046A:  RETLW  FF
046B:  RETLW  FF
046C:  RETLW  FF
046D:  RETLW  FF
046E:  RETLW  FF
046F:  RETLW  FF
0470:  RETLW  FF
0471:  RETLW  FF
0472:  RETLW  FF
0473:  RETLW  FF
0474:  RETLW  FF
0475:  RETLW  FF
0476:  RETLW  FF
0477:  RETLW  FF
0478:  RETLW  FF
0479:  RETLW  FF
047A:  RETLW  FF
047B:  RETLW  FF
047C:  RETLW  FF
047D:  RETLW  FF
047E:  RETLW  FF
047F:  RETLW  FC
0480:  RETLW  F8
0481:  RETLW  E0
0482:  RETLW  C0
0483:  RETLW  80
0484:  RETLW  00
0485:  RETLW  00
0486:  RETLW  00
0487:  RETLW  00
0488:  RETLW  00
0489:  RETLW  01
048A:  RETLW  01
048B:  RETLW  03
048C:  RETLW  03
048D:  RETLW  03
048E:  RETLW  02
048F:  RETLW  06
0490:  RETLW  06
0491:  RETLW  04
0492:  RETLW  04
0493:  RETLW  04
0494:  RETLW  04
0495:  RETLW  04
0496:  RETLW  06
0497:  RETLW  06
0498:  RETLW  02
0499:  RETLW  03
049A:  RETLW  03
049B:  RETLW  03
049C:  RETLW  01
049D:  RETLW  01
049E:  RETLW  00
049F:  RETLW  00
04A0:  RETLW  00
04A1:  RETLW  00
04A2:  RETLW  00
04A3:  RETLW  80
04A4:  RETLW  C0
04A5:  RETLW  E0
04A6:  RETLW  F0
04A7:  RETLW  FC
04A8:  RETLW  FF
04A9:  RETLW  FF
04AA:  RETLW  FF
04AB:  RETLW  FF
04AC:  RETLW  FF
04AD:  RETLW  FF
04AE:  RETLW  FF
04AF:  RETLW  FF
04B0:  RETLW  FF
04B1:  RETLW  FF
04B2:  RETLW  FF
04B3:  RETLW  FF
04B4:  RETLW  FF
04B5:  RETLW  FF
04B6:  RETLW  FF
04B7:  RETLW  FF
04B8:  RETLW  FF
04B9:  RETLW  FF
04BA:  RETLW  FF
04BB:  RETLW  FF
04BC:  RETLW  FF
04BD:  RETLW  FF
04BE:  RETLW  FF
04BF:  RETLW  7F
04C0:  RETLW  3F
04C1:  RETLW  1F
04C2:  RETLW  1F
04C3:  RETLW  0F
04C4:  RETLW  07
04C5:  RETLW  03
04C6:  RETLW  01
04C7:  RETLW  01
04C8:  RETLW  00
04C9:  RETLW  00
04CA:  RETLW  00
04CB:  RETLW  00
04CC:  RETLW  00
04CD:  RETLW  00
04CE:  RETLW  00
04CF:  RETLW  00
04D0:  RETLW  00
04D1:  RETLW  00
04D2:  RETLW  00
04D3:  RETLW  00
04D4:  RETLW  00
04D5:  RETLW  00
04D6:  RETLW  00
04D7:  RETLW  00
04D8:  RETLW  00
04D9:  RETLW  80
04DA:  RETLW  C0
04DB:  RETLW  C0
04DC:  RETLW  E0
04DD:  RETLW  F0
04DE:  RETLW  F0
04DF:  RETLW  F8
04E0:  RETLW  FC
04E1:  RETLW  FE
04E2:  RETLW  FF
04E3:  RETLW  FF
04E4:  RETLW  FF
04E5:  RETLW  FF
04E6:  RETLW  FF
04E7:  RETLW  FF
04E8:  RETLW  FF
04E9:  RETLW  FF
04EA:  RETLW  FF
04EB:  RETLW  FF
04EC:  RETLW  FF
04ED:  RETLW  FF
04EE:  RETLW  FF
04EF:  RETLW  FF
04F0:  RETLW  FF
04F1:  RETLW  FF
04F2:  RETLW  FF
04F3:  RETLW  FF
04F4:  RETLW  FF
04F5:  RETLW  FF
04F6:  RETLW  FF
04F7:  RETLW  FF
04F8:  RETLW  FF
04F9:  RETLW  FF
04FA:  RETLW  FF
04FB:  RETLW  FF
04FC:  RETLW  FF
04FD:  RETLW  FF
04FE:  RETLW  FF
04FF:  RETLW  FF
0500:  RETLW  FF
0501:  RETLW  FF
0502:  RETLW  FF
0503:  RETLW  FF
0504:  RETLW  FF
0505:  RETLW  FF
0506:  RETLW  FE
0507:  RETLW  FC
0508:  RETLW  FC
0509:  RETLW  F8
050A:  RETLW  F8
050B:  RETLW  F0
050C:  RETLW  F0
050D:  RETLW  F0
050E:  RETLW  E0
050F:  RETLW  E0
0510:  RETLW  E0
0511:  RETLW  E0
0512:  RETLW  E0
0513:  RETLW  E0
0514:  RETLW  E0
0515:  RETLW  E0
0516:  RETLW  E0
0517:  RETLW  E0
0518:  RETLW  E0
0519:  RETLW  F0
051A:  RETLW  F0
051B:  RETLW  F0
051C:  RETLW  F8
051D:  RETLW  F8
051E:  RETLW  FC
051F:  RETLW  FC
0520:  RETLW  FE
0521:  RETLW  FE
0522:  RETLW  FF
0523:  RETLW  FF
0524:  RETLW  FF
0525:  RETLW  FF
0526:  RETLW  FF
0527:  RETLW  FF
0528:  RETLW  FF
0529:  RETLW  FF
052A:  RETLW  FF
052B:  RETLW  FF
052C:  RETLW  FF
052D:  RETLW  FF
052E:  RETLW  FF
052F:  RETLW  FF
0530:  RETLW  FF
0531:  RETLW  FF
0532:  RETLW  FF
0533:  RETLW  FF
0534:  RETLW  FF
0535:  RETLW  7F
0536:  RETLW  3F
0537:  RETLW  1F
0538:  RETLW  0F
0539:  RETLW  0F
053A:  RETLW  07
053B:  RETLW  03
053C:  RETLW  01
053D:  RETLW  01
053E:  RETLW  00
053F:  RETLW  00
0540:  RETLW  00
0541:  RETLW  00
0542:  RETLW  00
0543:  RETLW  00
0544:  RETLW  00
0545:  RETLW  00
0546:  RETLW  00
0547:  RETLW  00
0548:  RETLW  00
0549:  RETLW  00
054A:  RETLW  00
054B:  RETLW  00
054C:  RETLW  00
054D:  RETLW  00
054E:  RETLW  00
054F:  RETLW  00
0550:  RETLW  00
0551:  RETLW  00
0552:  RETLW  00
0553:  RETLW  00
0554:  RETLW  00
0555:  RETLW  00
0556:  RETLW  00
0557:  RETLW  01
0558:  RETLW  01
0559:  RETLW  01
055A:  RETLW  01
055B:  RETLW  01
055C:  RETLW  01
055D:  RETLW  01
055E:  RETLW  01
055F:  RETLW  01
0560:  RETLW  01
0561:  RETLW  01
0562:  RETLW  01
0563:  RETLW  01
0564:  RETLW  01
0565:  RETLW  01
0566:  RETLW  01
0567:  RETLW  01
0568:  RETLW  01
0569:  RETLW  01
056A:  RETLW  01
056B:  RETLW  01
056C:  RETLW  01
056D:  RETLW  01
056E:  RETLW  01
056F:  RETLW  01
0570:  RETLW  01
0571:  RETLW  FF
0572:  RETLW  FF
0573:  RETLW  FF
0574:  RETLW  FF
0575:  RETLW  FF
0576:  RETLW  FF
0577:  RETLW  FF
0578:  RETLW  FF
0579:  RETLW  FF
057A:  RETLW  FF
057B:  RETLW  FF
057C:  RETLW  FF
057D:  RETLW  FF
057E:  RETLW  FF
057F:  RETLW  FF
0580:  RETLW  FF
0581:  RETLW  FF
0582:  RETLW  FF
0583:  RETLW  FF
0584:  RETLW  FF
0585:  RETLW  FF
0586:  RETLW  FF
0587:  RETLW  FF
0588:  RETLW  FF
0589:  RETLW  FF
058A:  RETLW  FF
058B:  RETLW  FF
058C:  RETLW  FF
058D:  RETLW  FF
058E:  RETLW  FF
058F:  RETLW  FF
0590:  RETLW  FF
0591:  RETLW  FF
0592:  RETLW  FF
0593:  RETLW  FF
0594:  RETLW  FF
0595:  RETLW  FF
0596:  RETLW  FF
0597:  RETLW  FF
0598:  RETLW  FF
0599:  RETLW  FF
059A:  RETLW  FF
059B:  RETLW  FF
059C:  RETLW  FF
059D:  RETLW  FF
059E:  RETLW  FF
059F:  RETLW  FF
05A0:  RETLW  FF
05A1:  RETLW  FF
05A2:  RETLW  FF
05A3:  RETLW  FF
05A4:  RETLW  FF
05A5:  RETLW  FF
05A6:  RETLW  FF
05A7:  RETLW  FF
05A8:  RETLW  FF
05A9:  RETLW  FF
05AA:  RETLW  FF
05AB:  RETLW  FF
05AC:  RETLW  BF
05AD:  RETLW  9F
05AE:  RETLW  8F
05AF:  RETLW  8F
05B0:  RETLW  87
05B1:  RETLW  83
05B2:  RETLW  81
05B3:  RETLW  80
05B4:  RETLW  80
05B5:  RETLW  80
05B6:  RETLW  80
05B7:  RETLW  80
05B8:  RETLW  80
05B9:  RETLW  80
05BA:  RETLW  80
05BB:  RETLW  80
05BC:  RETLW  80
05BD:  RETLW  80
05BE:  RETLW  80
05BF:  RETLW  80
05C0:  RETLW  80
05C1:  RETLW  80
05C2:  RETLW  80
05C3:  RETLW  80
05C4:  RETLW  80
05C5:  RETLW  80
05C6:  RETLW  80
05C7:  RETLW  80
05C8:  RETLW  80
05C9:  RETLW  80
05CA:  RETLW  80
05CB:  RETLW  80
05CC:  RETLW  80
05CD:  RETLW  80
05CE:  RETLW  80
05CF:  RETLW  80
05D0:  RETLW  80
05D1:  RETLW  80
05D2:  RETLW  80
05D3:  RETLW  80
05D4:  RETLW  80
05D5:  RETLW  80
05D6:  RETLW  80
05D7:  RETLW  80
05D8:  RETLW  80
05D9:  RETLW  80
05DA:  RETLW  80
05DB:  RETLW  80
05DC:  RETLW  80
05DD:  RETLW  80
05DE:  RETLW  80
05DF:  RETLW  80
05E0:  RETLW  80
05E1:  RETLW  80
05E2:  RETLW  80
05E3:  RETLW  80
05E4:  RETLW  80
05E5:  RETLW  80
05E6:  RETLW  80
05E7:  RETLW  80
05E8:  RETLW  80
05E9:  RETLW  80
05EA:  RETLW  80
05EB:  RETLW  80
05EC:  RETLW  80
05ED:  RETLW  80
05EE:  RETLW  80
05EF:  RETLW  80
05F0:  RETLW  80
05F1:  RETLW  FF
05F2:  RETLW  FF
05F3:  BSF    0A.0
05F4:  BCF    0A.1
05F5:  BSF    0A.2
05F6:  ADDWF  02,F
05F7:  RETLW  3F
05F8:  RETLW  06
05F9:  RETLW  5B
05FA:  RETLW  4F
*
063B:  CLRF   77
063C:  CLRF   78
063D:  MOVF   44,W
063E:  BCF    03.0
063F:  BTFSC  45.0
0640:  ADDWF  77,F
0641:  RRF    77,F
0642:  RRF    78,F
0643:  BTFSC  45.1
0644:  ADDWF  77,F
0645:  RRF    77,F
0646:  RRF    78,F
0647:  BTFSC  45.2
0648:  ADDWF  77,F
0649:  RRF    77,F
064A:  RRF    78,F
064B:  BTFSC  45.3
064C:  ADDWF  77,F
064D:  RRF    77,F
064E:  RRF    78,F
064F:  BTFSC  45.4
0650:  ADDWF  77,F
0651:  RRF    77,F
0652:  RRF    78,F
0653:  BTFSC  45.5
0654:  ADDWF  77,F
0655:  RRF    77,F
0656:  RRF    78,F
0657:  BTFSC  45.6
0658:  ADDWF  77,F
0659:  RRF    77,F
065A:  RRF    78,F
065B:  BTFSC  45.7
065C:  ADDWF  77,F
065D:  RRF    77,F
065E:  RRF    78,F
065F:  RETURN
*
0792:  CLRF   78
0793:  CLRF   79
0794:  CLRF   77
0795:  CLRF   7A
0796:  MOVF   36,W
0797:  BTFSS  03.2
0798:  GOTO   79C
0799:  MOVF   35,W
079A:  BTFSC  03.2
079B:  GOTO   7B6
079C:  MOVLW  10
079D:  MOVWF  37
079E:  BCF    03.0
079F:  RLF    33,F
07A0:  RLF    34,F
07A1:  RLF    77,F
07A2:  RLF    7A,F
07A3:  MOVF   36,W
07A4:  SUBWF  7A,W
07A5:  BTFSS  03.2
07A6:  GOTO   7A9
07A7:  MOVF   35,W
07A8:  SUBWF  77,W
07A9:  BTFSS  03.0
07AA:  GOTO   7B2
07AB:  MOVF   35,W
07AC:  SUBWF  77,F
07AD:  BTFSS  03.0
07AE:  DECF   7A,F
07AF:  MOVF   36,W
07B0:  SUBWF  7A,F
07B1:  BSF    03.0
07B2:  RLF    78,F
07B3:  RLF    79,F
07B4:  DECFSZ 37,F
07B5:  GOTO   79E
07B6:  BSF    0A.3
07B7:  BCF    0A.4
07B8:  GOTO   658 (RETURN)
*
0800:  MOVWF  7B
0801:  MOVLW  08
0802:  ADDWF  7A,W
0803:  MOVWF  0A
0804:  MOVF   7B,W
0805:  ADDLW  09
0806:  BTFSC  03.0
0807:  INCF   0A,F
0808:  MOVWF  02
0809:  RETLW  00
080A:  RETLW  00
080B:  RETLW  00
080C:  RETLW  00
080D:  RETLW  00
080E:  RETLW  00
080F:  RETLW  00
0810:  RETLW  00
0811:  RETLW  00
0812:  RETLW  00
0813:  RETLW  00
0814:  RETLW  00
0815:  RETLW  00
0816:  RETLW  00
0817:  RETLW  00
0818:  RETLW  00
0819:  RETLW  00
081A:  RETLW  00
081B:  RETLW  00
081C:  RETLW  00
081D:  RETLW  00
081E:  RETLW  00
081F:  RETLW  00
0820:  RETLW  00
0821:  RETLW  00
0822:  RETLW  00
0823:  RETLW  00
0824:  RETLW  00
0825:  RETLW  00
0826:  RETLW  00
0827:  RETLW  00
0828:  RETLW  00
0829:  RETLW  00
082A:  RETLW  00
082B:  RETLW  00
082C:  RETLW  00
082D:  RETLW  00
082E:  RETLW  00
082F:  RETLW  00
0830:  RETLW  00
0831:  RETLW  00
0832:  RETLW  00
0833:  RETLW  00
0834:  RETLW  00
0835:  RETLW  00
0836:  RETLW  00
0837:  RETLW  00
0838:  RETLW  00
0839:  RETLW  00
083A:  RETLW  00
083B:  RETLW  00
083C:  RETLW  00
083D:  RETLW  00
083E:  RETLW  00
083F:  RETLW  00
0840:  RETLW  00
0841:  RETLW  00
0842:  RETLW  00
0843:  RETLW  00
0844:  RETLW  00
0845:  RETLW  00
0846:  RETLW  00
0847:  RETLW  00
0848:  RETLW  00
0849:  RETLW  00
084A:  RETLW  00
084B:  RETLW  00
084C:  RETLW  00
084D:  RETLW  00
084E:  RETLW  00
084F:  RETLW  00
0850:  RETLW  00
0851:  RETLW  00
0852:  RETLW  00
0853:  RETLW  00
0854:  RETLW  00
0855:  RETLW  00
0856:  RETLW  00
0857:  RETLW  00
0858:  RETLW  00
0859:  RETLW  00
085A:  RETLW  00
085B:  RETLW  00
085C:  RETLW  00
085D:  RETLW  03
085E:  RETLW  1F
085F:  RETLW  3F
0860:  RETLW  FF
0861:  RETLW  FF
0862:  RETLW  FF
0863:  RETLW  FF
0864:  RETLW  FF
0865:  RETLW  FF
0866:  RETLW  FF
0867:  RETLW  FF
0868:  RETLW  FF
0869:  RETLW  FF
086A:  RETLW  FF
086B:  RETLW  FF
086C:  RETLW  FF
086D:  RETLW  FF
086E:  RETLW  FF
086F:  RETLW  FF
0870:  RETLW  FF
0871:  RETLW  FF
0872:  RETLW  FF
0873:  RETLW  FF
0874:  RETLW  FF
0875:  RETLW  FF
0876:  RETLW  FF
0877:  RETLW  FF
0878:  RETLW  FF
0879:  RETLW  FF
087A:  RETLW  FF
087B:  RETLW  FF
087C:  RETLW  FF
087D:  RETLW  FF
087E:  RETLW  FF
087F:  RETLW  FF
0880:  RETLW  FF
0881:  RETLW  FF
0882:  RETLW  FF
0883:  RETLW  FF
0884:  RETLW  FF
0885:  RETLW  FF
0886:  RETLW  FF
0887:  RETLW  FF
0888:  RETLW  FF
0889:  RETLW  00
088A:  RETLW  00
088B:  RETLW  00
088C:  RETLW  00
088D:  RETLW  00
088E:  RETLW  00
088F:  RETLW  00
0890:  RETLW  00
0891:  RETLW  00
0892:  RETLW  00
0893:  RETLW  00
0894:  RETLW  00
0895:  RETLW  00
0896:  RETLW  00
0897:  RETLW  00
0898:  RETLW  00
0899:  RETLW  00
089A:  RETLW  00
089B:  RETLW  00
089C:  RETLW  00
089D:  RETLW  00
089E:  RETLW  00
089F:  RETLW  00
08A0:  RETLW  00
08A1:  RETLW  00
08A2:  RETLW  00
08A3:  RETLW  00
08A4:  RETLW  00
08A5:  RETLW  00
08A6:  RETLW  00
08A7:  RETLW  00
08A8:  RETLW  00
08A9:  RETLW  00
08AA:  RETLW  00
08AB:  RETLW  00
08AC:  RETLW  00
08AD:  RETLW  00
08AE:  RETLW  00
08AF:  RETLW  00
08B0:  RETLW  00
08B1:  RETLW  00
08B2:  RETLW  00
08B3:  RETLW  00
08B4:  RETLW  00
08B5:  RETLW  00
08B6:  RETLW  00
08B7:  RETLW  00
08B8:  RETLW  00
08B9:  RETLW  80
08BA:  RETLW  80
08BB:  RETLW  80
08BC:  RETLW  80
08BD:  RETLW  80
08BE:  RETLW  00
08BF:  RETLW  00
08C0:  RETLW  00
08C1:  RETLW  00
08C2:  RETLW  00
08C3:  RETLW  00
08C4:  RETLW  00
08C5:  RETLW  00
08C6:  RETLW  00
08C7:  RETLW  00
08C8:  RETLW  00
08C9:  RETLW  00
08CA:  RETLW  00
08CB:  RETLW  00
08CC:  RETLW  00
08CD:  RETLW  00
08CE:  RETLW  00
08CF:  RETLW  00
08D0:  RETLW  00
08D1:  RETLW  00
08D2:  RETLW  00
08D3:  RETLW  00
08D4:  RETLW  00
08D5:  RETLW  00
08D6:  RETLW  00
08D7:  RETLW  00
08D8:  RETLW  00
08D9:  RETLW  00
08DA:  RETLW  00
08DB:  RETLW  00
08DC:  RETLW  00
08DD:  RETLW  00
08DE:  RETLW  00
08DF:  RETLW  00
08E0:  RETLW  00
08E1:  RETLW  00
08E2:  RETLW  01
08E3:  RETLW  01
08E4:  RETLW  81
08E5:  RETLW  EF
08E6:  RETLW  DF
08E7:  RETLW  FF
08E8:  RETLW  FF
08E9:  RETLW  FF
08EA:  RETLW  FF
08EB:  RETLW  FF
08EC:  RETLW  FF
08ED:  RETLW  FF
08EE:  RETLW  FF
08EF:  RETLW  FF
08F0:  RETLW  FF
08F1:  RETLW  FF
08F2:  RETLW  FF
08F3:  RETLW  FF
08F4:  RETLW  FF
08F5:  RETLW  FF
08F6:  RETLW  FF
08F7:  RETLW  FF
08F8:  RETLW  FF
08F9:  RETLW  FF
08FA:  RETLW  FF
08FB:  RETLW  FF
08FC:  RETLW  FF
08FD:  RETLW  FF
08FE:  RETLW  FF
08FF:  RETLW  FF
0900:  RETLW  FF
0901:  RETLW  FF
0902:  RETLW  FF
0903:  RETLW  FF
0904:  RETLW  FF
0905:  RETLW  FF
0906:  RETLW  FF
0907:  RETLW  FF
0908:  RETLW  FF
0909:  RETLW  00
090A:  RETLW  00
090B:  RETLW  00
090C:  RETLW  00
090D:  RETLW  00
090E:  RETLW  00
090F:  RETLW  00
0910:  RETLW  00
0911:  RETLW  00
0912:  RETLW  00
0913:  RETLW  00
0914:  RETLW  00
0915:  RETLW  00
0916:  RETLW  00
0917:  RETLW  00
0918:  RETLW  80
0919:  RETLW  C0
091A:  RETLW  C0
091B:  RETLW  E0
091C:  RETLW  E0
091D:  RETLW  F0
091E:  RETLW  F0
091F:  RETLW  F0
0920:  RETLW  F8
0921:  RETLW  78
0922:  RETLW  38
0923:  RETLW  38
0924:  RETLW  1C
0925:  RETLW  1C
0926:  RETLW  1C
0927:  RETLW  1C
0928:  RETLW  1E
0929:  RETLW  1E
092A:  RETLW  1E
092B:  RETLW  1E
092C:  RETLW  1E
092D:  RETLW  1E
092E:  RETLW  1E
092F:  RETLW  1E
0930:  RETLW  1E
0931:  RETLW  1E
0932:  RETLW  1E
0933:  RETLW  1E
0934:  RETLW  8E
0935:  RETLW  CE
0936:  RETLW  6E
0937:  RETLW  6E
0938:  RETLW  2E
0939:  RETLW  8F
093A:  RETLW  DC
093B:  RETLW  BC
093C:  RETLW  FC
093D:  RETLW  D4
093E:  RETLW  14
093F:  RETLW  14
0940:  RETLW  16
0941:  RETLW  16
0942:  RETLW  06
0943:  RETLW  0E
0944:  RETLW  0C
0945:  RETLW  0C
0946:  RETLW  0C
0947:  RETLW  04
0948:  RETLW  0C
0949:  RETLW  08
094A:  RETLW  08
094B:  RETLW  00
094C:  RETLW  00
094D:  RETLW  00
094E:  RETLW  00
094F:  RETLW  00
0950:  RETLW  00
0951:  RETLW  00
0952:  RETLW  00
0953:  RETLW  00
0954:  RETLW  00
0955:  RETLW  00
0956:  RETLW  00
0957:  RETLW  00
0958:  RETLW  00
0959:  RETLW  00
095A:  RETLW  40
095B:  RETLW  40
095C:  RETLW  80
095D:  RETLW  88
095E:  RETLW  88
095F:  RETLW  0C
0960:  RETLW  04
0961:  RETLW  06
0962:  RETLW  07
0963:  RETLW  07
0964:  RETLW  07
0965:  RETLW  07
0966:  RETLW  07
0967:  RETLW  07
0968:  RETLW  07
0969:  RETLW  07
096A:  RETLW  07
096B:  RETLW  0F
096C:  RETLW  0F
096D:  RETLW  0F
096E:  RETLW  0F
096F:  RETLW  0F
0970:  RETLW  0F
0971:  RETLW  1F
0972:  RETLW  1F
0973:  RETLW  1F
0974:  RETLW  1F
0975:  RETLW  1F
0976:  RETLW  1F
0977:  RETLW  3F
0978:  RETLW  3F
0979:  RETLW  3F
097A:  RETLW  3F
097B:  RETLW  3F
097C:  RETLW  3F
097D:  RETLW  3F
097E:  RETLW  3F
097F:  RETLW  3F
0980:  RETLW  7F
0981:  RETLW  7F
0982:  RETLW  7F
0983:  RETLW  7F
0984:  RETLW  7F
0985:  RETLW  7F
0986:  RETLW  7F
0987:  RETLW  7F
0988:  RETLW  FF
0989:  RETLW  00
098A:  RETLW  00
098B:  RETLW  00
098C:  RETLW  00
098D:  RETLW  00
098E:  RETLW  00
098F:  RETLW  00
0990:  RETLW  00
0991:  RETLW  00
0992:  RETLW  00
0993:  RETLW  F0
0994:  RETLW  F8
0995:  RETLW  FC
0996:  RETLW  FE
0997:  RETLW  FF
0998:  RETLW  FF
0999:  RETLW  FF
099A:  RETLW  FF
099B:  RETLW  FF
099C:  RETLW  FF
099D:  RETLW  FF
099E:  RETLW  3F
099F:  RETLW  03
09A0:  RETLW  00
09A1:  RETLW  00
09A2:  RETLW  00
09A3:  RETLW  00
09A4:  RETLW  00
09A5:  RETLW  00
09A6:  RETLW  00
09A7:  RETLW  00
09A8:  RETLW  00
09A9:  RETLW  00
09AA:  RETLW  00
09AB:  RETLW  00
09AC:  RETLW  00
09AD:  RETLW  00
09AE:  RETLW  00
09AF:  RETLW  00
09B0:  RETLW  00
09B1:  RETLW  00
09B2:  RETLW  00
09B3:  RETLW  00
09B4:  RETLW  03
09B5:  RETLW  0F
09B6:  RETLW  18
09B7:  RETLW  00
09B8:  RETLW  00
09B9:  RETLW  1F
09BA:  RETLW  1F
09BB:  RETLW  1F
09BC:  RETLW  2F
09BD:  RETLW  24
09BE:  RETLW  00
09BF:  RETLW  00
09C0:  RETLW  00
09C1:  RETLW  00
09C2:  RETLW  00
09C3:  RETLW  00
09C4:  RETLW  00
09C5:  RETLW  00
09C6:  RETLW  00
09C7:  RETLW  00
09C8:  RETLW  00
09C9:  RETLW  00
09CA:  RETLW  00
09CB:  RETLW  00
09CC:  RETLW  60
09CD:  RETLW  70
09CE:  RETLW  F6
09CF:  RETLW  FE
09D0:  RETLW  FF
09D1:  RETLW  FF
09D2:  RETLW  FF
09D3:  RETLW  FF
09D4:  RETLW  FE
09D5:  RETLW  F0
09D6:  RETLW  80
09D7:  RETLW  00
09D8:  RETLW  00
09D9:  RETLW  00
09DA:  RETLW  00
09DB:  RETLW  E2
09DC:  RETLW  C2
09DD:  RETLW  C6
09DE:  RETLW  87
09DF:  RETLW  07
09E0:  RETLW  0F
09E1:  RETLW  1E
09E2:  RETLW  1E
09E3:  RETLW  3E
09E4:  RETLW  FC
09E5:  RETLW  F8
09E6:  RETLW  F0
09E7:  RETLW  E0
09E8:  RETLW  80
09E9:  RETLW  00
09EA:  RETLW  00
09EB:  RETLW  00
09EC:  RETLW  00
09ED:  RETLW  00
09EE:  RETLW  00
09EF:  RETLW  00
09F0:  RETLW  00
09F1:  RETLW  00
09F2:  RETLW  00
09F3:  RETLW  00
09F4:  RETLW  00
09F5:  RETLW  00
09F6:  RETLW  00
09F7:  RETLW  00
09F8:  RETLW  C0
09F9:  RETLW  E0
09FA:  RETLW  F0
09FB:  RETLW  F8
09FC:  RETLW  F8
09FD:  RETLW  F0
09FE:  RETLW  E0
09FF:  RETLW  C0
0A00:  RETLW  C0
0A01:  RETLW  80
0A02:  RETLW  80
0A03:  RETLW  80
0A04:  RETLW  80
0A05:  RETLW  80
0A06:  RETLW  80
0A07:  RETLW  80
0A08:  RETLW  80
0A09:  RETLW  00
0A0A:  RETLW  00
0A0B:  RETLW  00
0A0C:  RETLW  00
0A0D:  RETLW  00
0A0E:  RETLW  00
0A0F:  RETLW  00
0A10:  RETLW  00
0A11:  RETLW  00
0A12:  RETLW  1E
0A13:  RETLW  7F
0A14:  RETLW  FF
0A15:  RETLW  FF
0A16:  RETLW  FF
0A17:  RETLW  FF
0A18:  RETLW  FF
0A19:  RETLW  FF
0A1A:  RETLW  FF
0A1B:  RETLW  FF
0A1C:  RETLW  FF
0A1D:  RETLW  F0
0A1E:  RETLW  C0
0A1F:  RETLW  00
0A20:  RETLW  00
0A21:  RETLW  00
0A22:  RETLW  00
0A23:  RETLW  00
0A24:  RETLW  00
0A25:  RETLW  00
0A26:  RETLW  00
0A27:  RETLW  00
0A28:  RETLW  00
0A29:  RETLW  00
0A2A:  RETLW  00
0A2B:  RETLW  00
0A2C:  RETLW  00
0A2D:  RETLW  00
0A2E:  RETLW  00
0A2F:  RETLW  00
0A30:  RETLW  00
0A31:  RETLW  00
0A32:  RETLW  00
0A33:  RETLW  00
0A34:  RETLW  00
0A35:  RETLW  00
0A36:  RETLW  00
0A37:  RETLW  00
0A38:  RETLW  00
0A39:  RETLW  00
0A3A:  RETLW  00
0A3B:  RETLW  C0
0A3C:  RETLW  00
0A3D:  RETLW  C0
0A3E:  RETLW  00
0A3F:  RETLW  00
0A40:  RETLW  00
0A41:  RETLW  00
0A42:  RETLW  00
0A43:  RETLW  00
0A44:  RETLW  00
0A45:  RETLW  00
0A46:  RETLW  00
0A47:  RETLW  00
0A48:  RETLW  00
0A49:  RETLW  00
0A4A:  RETLW  00
0A4B:  RETLW  00
0A4C:  RETLW  00
0A4D:  RETLW  08
0A4E:  RETLW  00
0A4F:  RETLW  01
0A50:  RETLW  3F
0A51:  RETLW  7F
0A52:  RETLW  FF
0A53:  RETLW  FF
0A54:  RETLW  FF
0A55:  RETLW  FF
0A56:  RETLW  BF
0A57:  RETLW  80
0A58:  RETLW  00
0A59:  RETLW  00
0A5A:  RETLW  00
0A5B:  RETLW  03
0A5C:  RETLW  07
0A5D:  RETLW  07
0A5E:  RETLW  83
0A5F:  RETLW  80
0A60:  RETLW  80
0A61:  RETLW  C0
0A62:  RETLW  C0
0A63:  RETLW  F0
0A64:  RETLW  7B
0A65:  RETLW  3F
0A66:  RETLW  3F
0A67:  RETLW  0F
0A68:  RETLW  03
0A69:  RETLW  00
0A6A:  RETLW  00
0A6B:  RETLW  00
0A6C:  RETLW  00
0A6D:  RETLW  00
0A6E:  RETLW  00
0A6F:  RETLW  00
0A70:  RETLW  00
0A71:  RETLW  00
0A72:  RETLW  00
0A73:  RETLW  00
0A74:  RETLW  00
0A75:  RETLW  00
0A76:  RETLW  00
0A77:  RETLW  3F
0A78:  RETLW  7F
0A79:  RETLW  FF
0A7A:  RETLW  3F
0A7B:  RETLW  1F
0A7C:  RETLW  1F
0A7D:  RETLW  1F
0A7E:  RETLW  0F
0A7F:  RETLW  0F
0A80:  RETLW  0F
0A81:  RETLW  07
0A82:  RETLW  07
0A83:  RETLW  07
0A84:  RETLW  07
0A85:  RETLW  07
0A86:  RETLW  07
0A87:  RETLW  07
0A88:  RETLW  07
0A89:  RETLW  00
0A8A:  RETLW  00
0A8B:  RETLW  00
0A8C:  RETLW  00
0A8D:  RETLW  00
0A8E:  RETLW  00
0A8F:  RETLW  00
0A90:  RETLW  00
0A91:  RETLW  00
0A92:  RETLW  00
0A93:  RETLW  00
0A94:  RETLW  00
0A95:  RETLW  01
0A96:  RETLW  03
0A97:  RETLW  07
0A98:  RETLW  0F
0A99:  RETLW  1F
0A9A:  RETLW  1F
0A9B:  RETLW  3F
0A9C:  RETLW  7F
0A9D:  RETLW  7F
0A9E:  RETLW  FF
0A9F:  RETLW  FE
0AA0:  RETLW  F8
0AA1:  RETLW  F0
0AA2:  RETLW  C0
0AA3:  RETLW  C0
0AA4:  RETLW  80
0AA5:  RETLW  80
0AA6:  RETLW  80
0AA7:  RETLW  00
0AA8:  RETLW  00
0AA9:  RETLW  00
0AAA:  RETLW  00
0AAB:  RETLW  00
0AAC:  RETLW  00
0AAD:  RETLW  00
0AAE:  RETLW  00
0AAF:  RETLW  80
0AB0:  RETLW  80
0AB1:  RETLW  80
0AB2:  RETLW  80
0AB3:  RETLW  80
0AB4:  RETLW  80
0AB5:  RETLW  80
0AB6:  RETLW  80
0AB7:  RETLW  86
0AB8:  RETLW  90
0AB9:  RETLW  80
0ABA:  RETLW  80
0ABB:  RETLW  81
0ABC:  RETLW  80
0ABD:  RETLW  8F
0ABE:  RETLW  89
0ABF:  RETLW  C1
0AC0:  RETLW  80
0AC1:  RETLW  80
0AC2:  RETLW  80
0AC3:  RETLW  80
0AC4:  RETLW  80
0AC5:  RETLW  80
0AC6:  RETLW  00
0AC7:  RETLW  00
0AC8:  RETLW  00
0AC9:  RETLW  00
0ACA:  RETLW  00
0ACB:  RETLW  00
0ACC:  RETLW  00
0ACD:  RETLW  00
0ACE:  RETLW  00
0ACF:  RETLW  00
0AD0:  RETLW  00
0AD1:  RETLW  00
0AD2:  RETLW  00
0AD3:  RETLW  01
0AD4:  RETLW  01
0AD5:  RETLW  01
0AD6:  RETLW  01
0AD7:  RETLW  00
0AD8:  RETLW  00
0AD9:  RETLW  00
0ADA:  RETLW  00
0ADB:  RETLW  00
0ADC:  RETLW  00
0ADD:  RETLW  00
0ADE:  RETLW  00
0ADF:  RETLW  00
0AE0:  RETLW  00
0AE1:  RETLW  00
0AE2:  RETLW  00
0AE3:  RETLW  00
0AE4:  RETLW  00
0AE5:  RETLW  00
0AE6:  RETLW  00
0AE7:  RETLW  10
0AE8:  RETLW  10
0AE9:  RETLW  30
0AEA:  RETLW  70
0AEB:  RETLW  70
0AEC:  RETLW  F0
0AED:  RETLW  F0
0AEE:  RETLW  F0
0AEF:  RETLW  F0
0AF0:  RETLW  F0
0AF1:  RETLW  F0
0AF2:  RETLW  F0
0AF3:  RETLW  F0
0AF4:  RETLW  F0
0AF5:  RETLW  F0
0AF6:  RETLW  F0
0AF7:  RETLW  F0
0AF8:  RETLW  F0
0AF9:  RETLW  F0
0AFA:  RETLW  F0
0AFB:  RETLW  F0
0AFC:  RETLW  F0
0AFD:  RETLW  F0
0AFE:  RETLW  F0
0AFF:  RETLW  F0
0B00:  RETLW  F0
0B01:  RETLW  F0
0B02:  RETLW  F0
0B03:  RETLW  F0
0B04:  RETLW  F0
0B05:  RETLW  F0
0B06:  RETLW  F0
0B07:  RETLW  E0
0B08:  RETLW  E0
0B09:  RETLW  00
0B0A:  RETLW  00
0B0B:  RETLW  00
0B0C:  RETLW  00
0B0D:  RETLW  00
0B0E:  RETLW  00
0B0F:  RETLW  00
0B10:  RETLW  00
0B11:  RETLW  00
0B12:  RETLW  00
0B13:  RETLW  00
0B14:  RETLW  00
0B15:  RETLW  00
0B16:  RETLW  00
0B17:  RETLW  00
0B18:  RETLW  00
0B19:  RETLW  00
0B1A:  RETLW  00
0B1B:  RETLW  00
0B1C:  RETLW  00
0B1D:  RETLW  00
0B1E:  RETLW  00
0B1F:  RETLW  00
0B20:  RETLW  00
0B21:  RETLW  01
0B22:  RETLW  01
0B23:  RETLW  01
0B24:  RETLW  01
0B25:  RETLW  03
0B26:  RETLW  03
0B27:  RETLW  03
0B28:  RETLW  03
0B29:  RETLW  03
0B2A:  RETLW  03
0B2B:  RETLW  03
0B2C:  RETLW  07
0B2D:  RETLW  07
0B2E:  RETLW  07
0B2F:  RETLW  07
0B30:  RETLW  03
0B31:  RETLW  03
0B32:  RETLW  03
0B33:  RETLW  03
0B34:  RETLW  03
0B35:  RETLW  03
0B36:  RETLW  03
0B37:  RETLW  03
0B38:  RETLW  03
0B39:  RETLW  03
0B3A:  RETLW  03
0B3B:  RETLW  03
0B3C:  RETLW  01
0B3D:  RETLW  01
0B3E:  RETLW  00
0B3F:  RETLW  00
0B40:  RETLW  00
0B41:  RETLW  00
0B42:  RETLW  00
0B43:  RETLW  00
0B44:  RETLW  00
0B45:  RETLW  00
0B46:  RETLW  00
0B47:  RETLW  00
0B48:  RETLW  00
0B49:  RETLW  00
0B4A:  RETLW  00
0B4B:  RETLW  00
0B4C:  RETLW  00
0B4D:  RETLW  00
0B4E:  RETLW  00
0B4F:  RETLW  00
0B50:  RETLW  00
0B51:  RETLW  00
0B52:  RETLW  00
0B53:  RETLW  00
0B54:  RETLW  00
0B55:  RETLW  00
0B56:  RETLW  00
0B57:  RETLW  00
0B58:  RETLW  00
0B59:  RETLW  00
0B5A:  RETLW  00
0B5B:  RETLW  00
0B5C:  RETLW  00
0B5D:  RETLW  00
0B5E:  RETLW  00
0B5F:  RETLW  00
0B60:  RETLW  00
0B61:  RETLW  00
0B62:  RETLW  00
0B63:  RETLW  00
0B64:  RETLW  00
0B65:  RETLW  00
0B66:  RETLW  00
0B67:  RETLW  00
0B68:  RETLW  00
0B69:  RETLW  00
0B6A:  RETLW  00
0B6B:  RETLW  00
0B6C:  RETLW  01
0B6D:  RETLW  03
0B6E:  RETLW  0F
0B6F:  RETLW  1F
0B70:  RETLW  3F
0B71:  RETLW  FF
0B72:  RETLW  FF
0B73:  RETLW  FF
0B74:  RETLW  FF
0B75:  RETLW  FF
0B76:  RETLW  FF
0B77:  RETLW  FF
0B78:  RETLW  FF
0B79:  RETLW  FF
0B7A:  RETLW  FF
0B7B:  RETLW  FF
0B7C:  RETLW  FF
0B7D:  RETLW  FF
0B7E:  RETLW  FF
0B7F:  RETLW  FF
0B80:  RETLW  FF
0B81:  RETLW  FF
0B82:  RETLW  FF
0B83:  RETLW  FF
0B84:  RETLW  FF
0B85:  RETLW  FF
0B86:  RETLW  FF
0B87:  RETLW  FF
0B88:  RETLW  FF
0B89:  RETLW  00
0B8A:  RETLW  00
0B8B:  RETLW  00
0B8C:  RETLW  00
0B8D:  RETLW  00
0B8E:  RETLW  00
0B8F:  RETLW  00
0B90:  RETLW  00
0B91:  RETLW  00
0B92:  RETLW  00
0B93:  RETLW  00
0B94:  RETLW  00
0B95:  RETLW  00
0B96:  RETLW  00
0B97:  RETLW  00
0B98:  RETLW  00
0B99:  RETLW  00
0B9A:  RETLW  00
0B9B:  RETLW  00
0B9C:  RETLW  00
0B9D:  RETLW  00
0B9E:  RETLW  00
0B9F:  RETLW  00
0BA0:  RETLW  00
0BA1:  RETLW  00
0BA2:  RETLW  00
0BA3:  RETLW  00
0BA4:  RETLW  00
0BA5:  RETLW  00
0BA6:  RETLW  00
0BA7:  RETLW  00
0BA8:  RETLW  00
0BA9:  RETLW  00
0BAA:  RETLW  00
0BAB:  RETLW  00
0BAC:  RETLW  00
0BAD:  RETLW  00
0BAE:  RETLW  00
0BAF:  RETLW  00
0BB0:  RETLW  00
0BB1:  RETLW  00
0BB2:  RETLW  00
0BB3:  RETLW  00
0BB4:  RETLW  00
0BB5:  RETLW  00
0BB6:  RETLW  00
0BB7:  RETLW  00
0BB8:  RETLW  00
0BB9:  RETLW  00
0BBA:  RETLW  00
0BBB:  RETLW  00
0BBC:  RETLW  00
0BBD:  RETLW  00
0BBE:  RETLW  00
0BBF:  RETLW  00
0BC0:  RETLW  00
0BC1:  RETLW  00
0BC2:  RETLW  00
0BC3:  RETLW  00
0BC4:  RETLW  00
0BC5:  RETLW  00
0BC6:  RETLW  00
0BC7:  RETLW  00
0BC8:  RETLW  00
0BC9:  RETLW  00
0BCA:  RETLW  00
0BCB:  RETLW  00
0BCC:  RETLW  00
0BCD:  RETLW  00
0BCE:  RETLW  00
0BCF:  RETLW  00
0BD0:  RETLW  00
0BD1:  RETLW  00
0BD2:  RETLW  00
0BD3:  RETLW  00
0BD4:  RETLW  00
0BD5:  RETLW  00
0BD6:  RETLW  00
0BD7:  RETLW  00
0BD8:  RETLW  00
0BD9:  RETLW  00
0BDA:  RETLW  00
0BDB:  RETLW  00
0BDC:  RETLW  00
0BDD:  RETLW  00
0BDE:  RETLW  00
0BDF:  RETLW  00
0BE0:  RETLW  00
0BE1:  RETLW  00
0BE2:  RETLW  00
0BE3:  RETLW  00
0BE4:  RETLW  00
0BE5:  RETLW  00
0BE6:  RETLW  00
0BE7:  RETLW  00
0BE8:  RETLW  00
0BE9:  RETLW  00
0BEA:  RETLW  00
0BEB:  RETLW  00
0BEC:  RETLW  00
0BED:  RETLW  00
0BEE:  RETLW  00
0BEF:  RETLW  00
0BF0:  RETLW  00
0BF1:  RETLW  00
0BF2:  RETLW  01
0BF3:  RETLW  07
0BF4:  RETLW  0F
0BF5:  RETLW  3F
0BF6:  RETLW  7F
0BF7:  RETLW  FF
0BF8:  RETLW  FF
0BF9:  RETLW  FF
0BFA:  RETLW  FF
0BFB:  RETLW  FF
0BFC:  RETLW  FF
0BFD:  RETLW  FF
0BFE:  RETLW  FF
0BFF:  RETLW  FF
0C00:  RETLW  FF
0C01:  RETLW  FF
0C02:  RETLW  FF
0C03:  RETLW  FF
0C04:  RETLW  FF
0C05:  RETLW  FF
0C06:  RETLW  FF
0C07:  RETLW  FF
0C08:  RETLW  FF
*
1000:  MOVWF  7B
1001:  MOVLW  10
1002:  ADDWF  7A,W
1003:  MOVWF  0A
1004:  MOVF   7B,W
1005:  ADDLW  09
1006:  BTFSC  03.0
1007:  INCF   0A,F
1008:  MOVWF  02
1009:  RETLW  00
100A:  RETLW  00
100B:  RETLW  00
100C:  RETLW  00
100D:  RETLW  00
100E:  RETLW  00
100F:  RETLW  00
1010:  RETLW  00
1011:  RETLW  00
1012:  RETLW  00
1013:  RETLW  00
1014:  RETLW  00
1015:  RETLW  00
1016:  RETLW  00
1017:  RETLW  00
1018:  RETLW  80
1019:  RETLW  80
101A:  RETLW  80
101B:  RETLW  C0
101C:  RETLW  C0
101D:  RETLW  80
101E:  RETLW  80
101F:  RETLW  80
1020:  RETLW  80
1021:  RETLW  00
1022:  RETLW  00
1023:  RETLW  00
1024:  RETLW  E0
1025:  RETLW  30
1026:  RETLW  18
1027:  RETLW  CC
1028:  RETLW  EC
1029:  RETLW  2C
102A:  RETLW  28
102B:  RETLW  58
102C:  RETLW  B0
102D:  RETLW  70
102E:  RETLW  E0
102F:  RETLW  80
1030:  RETLW  00
1031:  RETLW  00
1032:  RETLW  00
1033:  RETLW  00
1034:  RETLW  00
1035:  RETLW  00
1036:  RETLW  00
1037:  RETLW  00
1038:  RETLW  00
1039:  RETLW  00
103A:  RETLW  00
103B:  RETLW  00
103C:  RETLW  00
103D:  RETLW  00
103E:  RETLW  00
103F:  RETLW  00
1040:  RETLW  00
1041:  RETLW  00
1042:  RETLW  00
1043:  RETLW  00
1044:  RETLW  00
1045:  RETLW  F0
1046:  RETLW  F8
1047:  RETLW  08
1048:  RETLW  88
1049:  RETLW  78
104A:  RETLW  30
104B:  RETLW  20
104C:  RETLW  E0
104D:  RETLW  C0
104E:  RETLW  00
104F:  RETLW  00
1050:  RETLW  00
1051:  RETLW  00
1052:  RETLW  00
1053:  RETLW  00
1054:  RETLW  00
1055:  RETLW  00
1056:  RETLW  00
1057:  RETLW  00
1058:  RETLW  00
1059:  RETLW  00
105A:  RETLW  00
105B:  RETLW  00
105C:  RETLW  00
105D:  RETLW  00
105E:  RETLW  00
105F:  RETLW  00
1060:  RETLW  00
1061:  RETLW  00
1062:  RETLW  00
1063:  RETLW  00
1064:  RETLW  00
1065:  RETLW  00
1066:  RETLW  00
1067:  RETLW  00
1068:  RETLW  00
1069:  RETLW  00
106A:  RETLW  00
106B:  RETLW  00
106C:  RETLW  00
106D:  RETLW  00
106E:  RETLW  00
106F:  RETLW  00
1070:  RETLW  00
1071:  RETLW  00
1072:  RETLW  00
1073:  RETLW  00
1074:  RETLW  00
1075:  RETLW  00
1076:  RETLW  00
1077:  RETLW  00
1078:  RETLW  00
1079:  RETLW  00
107A:  RETLW  00
107B:  RETLW  00
107C:  RETLW  00
107D:  RETLW  00
107E:  RETLW  00
107F:  RETLW  00
1080:  RETLW  00
1081:  RETLW  00
1082:  RETLW  00
1083:  RETLW  00
1084:  RETLW  00
1085:  RETLW  00
1086:  RETLW  00
1087:  RETLW  00
1088:  RETLW  00
1089:  RETLW  00
108A:  RETLW  00
108B:  RETLW  00
108C:  RETLW  00
108D:  RETLW  00
108E:  RETLW  00
108F:  RETLW  00
1090:  RETLW  80
1091:  RETLW  C0
1092:  RETLW  E0
1093:  RETLW  F0
1094:  RETLW  F8
1095:  RETLW  F8
1096:  RETLW  FE
1097:  RETLW  FF
1098:  RETLW  E7
1099:  RETLW  07
109A:  RETLW  03
109B:  RETLW  03
109C:  RETLW  03
109D:  RETLW  03
109E:  RETLW  FB
109F:  RETLW  FB
10A0:  RETLW  E7
10A1:  RETLW  07
10A2:  RETLW  03
10A3:  RETLW  07
10A4:  RETLW  07
10A5:  RETLW  04
10A6:  RETLW  00
10A7:  RETLW  0F
10A8:  RETLW  0F
10A9:  RETLW  08
10AA:  RETLW  30
10AB:  RETLW  30
10AC:  RETLW  20
10AD:  RETLW  11
10AE:  RETLW  14
10AF:  RETLW  03
10B0:  RETLW  0F
10B1:  RETLW  4C
10B2:  RETLW  48
10B3:  RETLW  08
10B4:  RETLW  18
10B5:  RETLW  10
10B6:  RETLW  30
10B7:  RETLW  E0
10B8:  RETLW  80
10B9:  RETLW  00
10BA:  RETLW  00
10BB:  RETLW  00
10BC:  RETLW  00
10BD:  RETLW  00
10BE:  RETLW  00
10BF:  RETLW  00
10C0:  RETLW  00
10C1:  RETLW  00
10C2:  RETLW  00
10C3:  RETLW  07
10C4:  RETLW  0F
10C5:  RETLW  0D
10C6:  RETLW  19
10C7:  RETLW  19
10C8:  RETLW  F0
10C9:  RETLW  F0
10CA:  RETLW  00
10CB:  RETLW  00
10CC:  RETLW  B1
10CD:  RETLW  3F
10CE:  RETLW  FC
10CF:  RETLW  E0
10D0:  RETLW  C0
10D1:  RETLW  00
10D2:  RETLW  00
10D3:  RETLW  00
10D4:  RETLW  00
10D5:  RETLW  00
10D6:  RETLW  00
10D7:  RETLW  00
10D8:  RETLW  00
10D9:  RETLW  00
10DA:  RETLW  00
10DB:  RETLW  00
10DC:  RETLW  00
10DD:  RETLW  00
10DE:  RETLW  00
10DF:  RETLW  00
10E0:  RETLW  00
10E1:  RETLW  00
10E2:  RETLW  00
10E3:  RETLW  00
10E4:  RETLW  00
10E5:  RETLW  00
10E6:  RETLW  00
10E7:  RETLW  00
10E8:  RETLW  00
10E9:  RETLW  00
10EA:  RETLW  00
10EB:  RETLW  00
10EC:  RETLW  00
10ED:  RETLW  00
10EE:  RETLW  00
10EF:  RETLW  00
10F0:  RETLW  00
10F1:  RETLW  00
10F2:  RETLW  00
10F3:  RETLW  00
10F4:  RETLW  00
10F5:  RETLW  00
10F6:  RETLW  00
10F7:  RETLW  00
10F8:  RETLW  00
10F9:  RETLW  00
10FA:  RETLW  00
10FB:  RETLW  00
10FC:  RETLW  00
10FD:  RETLW  00
10FE:  RETLW  00
10FF:  RETLW  00
1100:  RETLW  00
1101:  RETLW  00
1102:  RETLW  00
1103:  RETLW  00
1104:  RETLW  00
1105:  RETLW  00
1106:  RETLW  00
1107:  RETLW  00
1108:  RETLW  00
1109:  RETLW  00
110A:  RETLW  00
110B:  RETLW  00
110C:  RETLW  00
110D:  RETLW  80
110E:  RETLW  F8
110F:  RETLW  FE
1110:  RETLW  FF
1111:  RETLW  FF
1112:  RETLW  FF
1113:  RETLW  FF
1114:  RETLW  FF
1115:  RETLW  FF
1116:  RETLW  FF
1117:  RETLW  FF
1118:  RETLW  00
1119:  RETLW  00
111A:  RETLW  80
111B:  RETLW  00
111C:  RETLW  3E
111D:  RETLW  00
111E:  RETLW  00
111F:  RETLW  00
1120:  RETLW  00
1121:  RETLW  00
1122:  RETLW  00
1123:  RETLW  00
1124:  RETLW  08
1125:  RETLW  01
1126:  RETLW  10
1127:  RETLW  10
1128:  RETLW  00
1129:  RETLW  00
112A:  RETLW  00
112B:  RETLW  00
112C:  RETLW  20
112D:  RETLW  20
112E:  RETLW  18
112F:  RETLW  10
1130:  RETLW  00
1131:  RETLW  08
1132:  RETLW  00
1133:  RETLW  00
1134:  RETLW  08
1135:  RETLW  00
1136:  RETLW  10
1137:  RETLW  C0
1138:  RETLW  03
1139:  RETLW  1E
113A:  RETLW  F8
113B:  RETLW  C0
113C:  RETLW  00
113D:  RETLW  00
113E:  RETLW  00
113F:  RETLW  00
1140:  RETLW  00
1141:  RETLW  00
1142:  RETLW  00
1143:  RETLW  00
1144:  RETLW  00
1145:  RETLW  00
1146:  RETLW  00
1147:  RETLW  80
1148:  RETLW  80
1149:  RETLW  C1
114A:  RETLW  E3
114B:  RETLW  FF
114C:  RETLW  FF
114D:  RETLW  FF
114E:  RETLW  FF
114F:  RETLW  FF
1150:  RETLW  FF
1151:  RETLW  30
1152:  RETLW  00
1153:  RETLW  00
1154:  RETLW  00
1155:  RETLW  00
1156:  RETLW  00
1157:  RETLW  00
1158:  RETLW  00
1159:  RETLW  00
115A:  RETLW  00
115B:  RETLW  00
115C:  RETLW  00
115D:  RETLW  00
115E:  RETLW  00
115F:  RETLW  00
1160:  RETLW  00
1161:  RETLW  00
1162:  RETLW  00
1163:  RETLW  00
1164:  RETLW  00
1165:  RETLW  00
1166:  RETLW  00
1167:  RETLW  00
1168:  RETLW  00
1169:  RETLW  00
116A:  RETLW  00
116B:  RETLW  00
116C:  RETLW  00
116D:  RETLW  80
116E:  RETLW  00
116F:  RETLW  00
1170:  RETLW  80
1171:  RETLW  80
1172:  RETLW  80
1173:  RETLW  00
1174:  RETLW  00
1175:  RETLW  00
1176:  RETLW  00
1177:  RETLW  00
1178:  RETLW  00
1179:  RETLW  00
117A:  RETLW  00
117B:  RETLW  00
117C:  RETLW  00
117D:  RETLW  00
117E:  RETLW  00
117F:  RETLW  00
1180:  RETLW  00
1181:  RETLW  00
1182:  RETLW  00
1183:  RETLW  00
1184:  RETLW  00
1185:  RETLW  00
1186:  RETLW  00
1187:  RETLW  00
1188:  RETLW  00
1189:  RETLW  00
118A:  RETLW  00
118B:  RETLW  00
118C:  RETLW  40
118D:  RETLW  FF
118E:  RETLW  FF
118F:  RETLW  FF
1190:  RETLW  FF
1191:  RETLW  FF
1192:  RETLW  FF
1193:  RETLW  FF
1194:  RETLW  7F
1195:  RETLW  1F
1196:  RETLW  07
1197:  RETLW  90
1198:  RETLW  24
1199:  RETLW  08
119A:  RETLW  C2
119B:  RETLW  E1
119C:  RETLW  F0
119D:  RETLW  70
119E:  RETLW  10
119F:  RETLW  00
11A0:  RETLW  00
11A1:  RETLW  04
11A2:  RETLW  00
11A3:  RETLW  00
11A4:  RETLW  00
11A5:  RETLW  00
11A6:  RETLW  00
11A7:  RETLW  08
11A8:  RETLW  18
11A9:  RETLW  00
11AA:  RETLW  10
11AB:  RETLW  20
11AC:  RETLW  00
11AD:  RETLW  00
11AE:  RETLW  80
11AF:  RETLW  80
11B0:  RETLW  80
11B1:  RETLW  60
11B2:  RETLW  10
11B3:  RETLW  08
11B4:  RETLW  C0
11B5:  RETLW  34
11B6:  RETLW  02
11B7:  RETLW  00
11B8:  RETLW  00
11B9:  RETLW  00
11BA:  RETLW  00
11BB:  RETLW  07
11BC:  RETLW  0E
11BD:  RETLW  18
11BE:  RETLW  30
11BF:  RETLW  20
11C0:  RETLW  30
11C1:  RETLW  70
11C2:  RETLW  78
11C3:  RETLW  FC
11C4:  RETLW  FE
11C5:  RETLW  FE
11C6:  RETLW  FF
11C7:  RETLW  FF
11C8:  RETLW  FF
11C9:  RETLW  FF
11CA:  RETLW  FF
11CB:  RETLW  F7
11CC:  RETLW  F7
11CD:  RETLW  E3
11CE:  RETLW  E3
11CF:  RETLW  E1
11D0:  RETLW  E0
11D1:  RETLW  E0
11D2:  RETLW  E0
11D3:  RETLW  E0
11D4:  RETLW  E0
11D5:  RETLW  E0
11D6:  RETLW  E0
11D7:  RETLW  E0
11D8:  RETLW  E0
11D9:  RETLW  E0
11DA:  RETLW  E0
11DB:  RETLW  E0
11DC:  RETLW  E0
11DD:  RETLW  E0
11DE:  RETLW  E0
11DF:  RETLW  00
11E0:  RETLW  00
11E1:  RETLW  00
11E2:  RETLW  00
11E3:  RETLW  00
11E4:  RETLW  00
11E5:  RETLW  00
11E6:  RETLW  00
11E7:  RETLW  00
11E8:  RETLW  00
11E9:  RETLW  00
11EA:  RETLW  00
11EB:  RETLW  00
11EC:  RETLW  F8
11ED:  RETLW  F9
11EE:  RETLW  01
11EF:  RETLW  03
11F0:  RETLW  01
11F1:  RETLW  01
11F2:  RETLW  01
11F3:  RETLW  00
11F4:  RETLW  00
11F5:  RETLW  00
11F6:  RETLW  00
11F7:  RETLW  00
11F8:  RETLW  00
11F9:  RETLW  00
11FA:  RETLW  00
11FB:  RETLW  00
11FC:  RETLW  00
11FD:  RETLW  00
11FE:  RETLW  00
11FF:  RETLW  00
1200:  RETLW  00
1201:  RETLW  00
1202:  RETLW  00
1203:  RETLW  00
1204:  RETLW  00
1205:  RETLW  00
1206:  RETLW  00
1207:  RETLW  00
1208:  RETLW  00
1209:  RETLW  00
120A:  RETLW  00
120B:  RETLW  00
120C:  RETLW  00
120D:  RETLW  0F
120E:  RETLW  3F
120F:  RETLW  7F
1210:  RETLW  FF
1211:  RETLW  FF
1212:  RETLW  FF
1213:  RETLW  C3
1214:  RETLW  C0
1215:  RETLW  C0
1216:  RETLW  C0
1217:  RETLW  C3
1218:  RETLW  C0
1219:  RETLW  C0
121A:  RETLW  83
121B:  RETLW  88
121C:  RETLW  00
121D:  RETLW  10
121E:  RETLW  10
121F:  RETLW  00
1220:  RETLW  00
1221:  RETLW  00
1222:  RETLW  00
1223:  RETLW  00
1224:  RETLW  00
1225:  RETLW  00
1226:  RETLW  00
1227:  RETLW  00
1228:  RETLW  00
1229:  RETLW  00
122A:  RETLW  1C
122B:  RETLW  02
122C:  RETLW  01
122D:  RETLW  00
122E:  RETLW  00
122F:  RETLW  00
1230:  RETLW  09
1231:  RETLW  06
1232:  RETLW  06
1233:  RETLW  01
1234:  RETLW  80
1235:  RETLW  C0
1236:  RETLW  60
1237:  RETLW  30
1238:  RETLW  18
1239:  RETLW  0C
123A:  RETLW  06
123B:  RETLW  02
123C:  RETLW  06
123D:  RETLW  06
123E:  RETLW  1D
123F:  RETLW  7F
1240:  RETLW  FF
1241:  RETLW  FF
1242:  RETLW  F6
1243:  RETLW  F4
1244:  RETLW  F4
1245:  RETLW  EC
1246:  RETLW  ED
1247:  RETLW  D9
1248:  RETLW  D9
1249:  RETLW  BB
124A:  RETLW  BB
124B:  RETLW  7B
124C:  RETLW  7F
124D:  RETLW  7F
124E:  RETLW  77
124F:  RETLW  67
1250:  RETLW  47
1251:  RETLW  0F
1252:  RETLW  CF
1253:  RETLW  FF
1254:  RETLW  FF
1255:  RETLW  FF
1256:  RETLW  FF
1257:  RETLW  FF
1258:  RETLW  FF
1259:  RETLW  FF
125A:  RETLW  FF
125B:  RETLW  FF
125C:  RETLW  FF
125D:  RETLW  FF
125E:  RETLW  FF
125F:  RETLW  F8
1260:  RETLW  F0
1261:  RETLW  F0
1262:  RETLW  F0
1263:  RETLW  F0
1264:  RETLW  F0
1265:  RETLW  F0
1266:  RETLW  E0
1267:  RETLW  E0
1268:  RETLW  E0
1269:  RETLW  60
126A:  RETLW  60
126B:  RETLW  60
126C:  RETLW  7F
126D:  RETLW  7F
126E:  RETLW  00
126F:  RETLW  00
1270:  RETLW  00
1271:  RETLW  00
1272:  RETLW  00
1273:  RETLW  00
1274:  RETLW  00
1275:  RETLW  00
1276:  RETLW  00
1277:  RETLW  00
1278:  RETLW  00
1279:  RETLW  00
127A:  RETLW  00
127B:  RETLW  00
127C:  RETLW  00
127D:  RETLW  00
127E:  RETLW  00
127F:  RETLW  00
1280:  RETLW  00
1281:  RETLW  00
1282:  RETLW  00
1283:  RETLW  00
1284:  RETLW  00
1285:  RETLW  00
1286:  RETLW  00
1287:  RETLW  00
1288:  RETLW  00
1289:  RETLW  00
128A:  RETLW  00
128B:  RETLW  00
128C:  RETLW  00
128D:  RETLW  00
128E:  RETLW  00
128F:  RETLW  00
1290:  RETLW  0F
1291:  RETLW  1F
1292:  RETLW  1F
1293:  RETLW  3F
1294:  RETLW  3F
1295:  RETLW  3F
1296:  RETLW  3F
1297:  RETLW  3F
1298:  RETLW  3F
1299:  RETLW  3F
129A:  RETLW  FF
129B:  RETLW  FF
129C:  RETLW  3F
129D:  RETLW  1F
129E:  RETLW  9F
129F:  RETLW  CF
12A0:  RETLW  67
12A1:  RETLW  37
12A2:  RETLW  13
12A3:  RETLW  03
12A4:  RETLW  00
12A5:  RETLW  08
12A6:  RETLW  08
12A7:  RETLW  18
12A8:  RETLW  80
12A9:  RETLW  E0
12AA:  RETLW  30
12AB:  RETLW  30
12AC:  RETLW  10
12AD:  RETLW  10
12AE:  RETLW  18
12AF:  RETLW  08
12B0:  RETLW  0C
12B1:  RETLW  06
12B2:  RETLW  02
12B3:  RETLW  03
12B4:  RETLW  01
12B5:  RETLW  00
12B6:  RETLW  00
12B7:  RETLW  00
12B8:  RETLW  00
12B9:  RETLW  00
12BA:  RETLW  00
12BB:  RETLW  00
12BC:  RETLW  00
12BD:  RETLW  00
12BE:  RETLW  00
12BF:  RETLW  00
12C0:  RETLW  00
12C1:  RETLW  03
12C2:  RETLW  0F
12C3:  RETLW  FF
12C4:  RETLW  FF
12C5:  RETLW  FF
12C6:  RETLW  FF
12C7:  RETLW  FF
12C8:  RETLW  FD
12C9:  RETLW  F3
12CA:  RETLW  03
12CB:  RETLW  07
12CC:  RETLW  07
12CD:  RETLW  06
12CE:  RETLW  0E
12CF:  RETLW  0C
12D0:  RETLW  1C
12D1:  RETLW  1C
12D2:  RETLW  3F
12D3:  RETLW  3F
12D4:  RETLW  7F
12D5:  RETLW  7F
12D6:  RETLW  FF
12D7:  RETLW  FF
12D8:  RETLW  FF
12D9:  RETLW  FF
12DA:  RETLW  FF
12DB:  RETLW  FF
12DC:  RETLW  7F
12DD:  RETLW  1F
12DE:  RETLW  1F
12DF:  RETLW  1F
12E0:  RETLW  1F
12E1:  RETLW  1E
12E2:  RETLW  1E
12E3:  RETLW  1E
12E4:  RETLW  1E
12E5:  RETLW  1E
12E6:  RETLW  1E
12E7:  RETLW  1C
12E8:  RETLW  0C
12E9:  RETLW  0C
12EA:  RETLW  0C
12EB:  RETLW  0C
12EC:  RETLW  0C
12ED:  RETLW  0C
12EE:  RETLW  0C
12EF:  RETLW  0C
12F0:  RETLW  0C
12F1:  RETLW  0E
12F2:  RETLW  06
12F3:  RETLW  06
12F4:  RETLW  06
12F5:  RETLW  06
12F6:  RETLW  06
12F7:  RETLW  07
12F8:  RETLW  07
12F9:  RETLW  03
12FA:  RETLW  03
12FB:  RETLW  02
12FC:  RETLW  00
12FD:  RETLW  0E
12FE:  RETLW  1D
12FF:  RETLW  38
1300:  RETLW  00
1301:  RETLW  00
1302:  RETLW  00
1303:  RETLW  00
1304:  RETLW  00
1305:  RETLW  00
1306:  RETLW  00
1307:  RETLW  00
1308:  RETLW  00
1309:  RETLW  00
130A:  RETLW  00
130B:  RETLW  00
130C:  RETLW  00
130D:  RETLW  00
130E:  RETLW  00
130F:  RETLW  00
1310:  RETLW  00
1311:  RETLW  00
1312:  RETLW  00
1313:  RETLW  00
1314:  RETLW  00
1315:  RETLW  00
1316:  RETLW  00
1317:  RETLW  00
1318:  RETLW  00
1319:  RETLW  1F
131A:  RETLW  3F
131B:  RETLW  60
131C:  RETLW  60
131D:  RETLW  47
131E:  RETLW  4F
131F:  RETLW  48
1320:  RETLW  68
1321:  RETLW  60
1322:  RETLW  34
1323:  RETLW  30
1324:  RETLW  18
1325:  RETLW  0C
1326:  RETLW  0E
1327:  RETLW  07
1328:  RETLW  03
1329:  RETLW  00
132A:  RETLW  00
132B:  RETLW  00
132C:  RETLW  00
132D:  RETLW  00
132E:  RETLW  00
132F:  RETLW  00
1330:  RETLW  00
1331:  RETLW  00
1332:  RETLW  00
1333:  RETLW  C0
1334:  RETLW  C0
1335:  RETLW  60
1336:  RETLW  60
1337:  RETLW  60
1338:  RETLW  60
1339:  RETLW  20
133A:  RETLW  20
133B:  RETLW  20
133C:  RETLW  20
133D:  RETLW  20
133E:  RETLW  20
133F:  RETLW  30
1340:  RETLW  DC
1341:  RETLW  9E
1342:  RETLW  DF
1343:  RETLW  7F
1344:  RETLW  7F
1345:  RETLW  3F
1346:  RETLW  1F
1347:  RETLW  0F
1348:  RETLW  03
1349:  RETLW  01
134A:  RETLW  00
134B:  RETLW  00
134C:  RETLW  00
134D:  RETLW  00
134E:  RETLW  00
134F:  RETLW  00
1350:  RETLW  00
1351:  RETLW  00
1352:  RETLW  00
1353:  RETLW  00
1354:  RETLW  00
1355:  RETLW  00
1356:  RETLW  00
1357:  RETLW  00
1358:  RETLW  01
1359:  RETLW  01
135A:  RETLW  03
135B:  RETLW  01
135C:  RETLW  00
135D:  RETLW  00
135E:  RETLW  00
135F:  RETLW  00
1360:  RETLW  00
1361:  RETLW  00
1362:  RETLW  00
1363:  RETLW  00
1364:  RETLW  00
1365:  RETLW  00
1366:  RETLW  00
1367:  RETLW  00
1368:  RETLW  00
1369:  RETLW  00
136A:  RETLW  00
136B:  RETLW  00
136C:  RETLW  00
136D:  RETLW  00
136E:  RETLW  00
136F:  RETLW  00
1370:  RETLW  00
1371:  RETLW  00
1372:  RETLW  00
1373:  RETLW  00
1374:  RETLW  00
1375:  RETLW  00
1376:  RETLW  00
1377:  RETLW  00
1378:  RETLW  00
1379:  RETLW  00
137A:  RETLW  00
137B:  RETLW  00
137C:  RETLW  00
137D:  RETLW  00
137E:  RETLW  00
137F:  RETLW  00
1380:  RETLW  00
1381:  RETLW  00
1382:  RETLW  00
1383:  RETLW  00
1384:  RETLW  00
1385:  RETLW  00
1386:  RETLW  00
1387:  RETLW  00
1388:  RETLW  00
1389:  RETLW  00
138A:  RETLW  00
138B:  RETLW  00
138C:  RETLW  00
138D:  RETLW  00
138E:  RETLW  00
138F:  RETLW  00
1390:  RETLW  00
1391:  RETLW  00
1392:  RETLW  00
1393:  RETLW  00
1394:  RETLW  00
1395:  RETLW  00
1396:  RETLW  00
1397:  RETLW  00
1398:  RETLW  00
1399:  RETLW  00
139A:  RETLW  00
139B:  RETLW  00
139C:  RETLW  00
139D:  RETLW  00
139E:  RETLW  00
139F:  RETLW  00
13A0:  RETLW  00
13A1:  RETLW  00
13A2:  RETLW  00
13A3:  RETLW  00
13A4:  RETLW  00
13A5:  RETLW  00
13A6:  RETLW  00
13A7:  RETLW  00
13A8:  RETLW  00
13A9:  RETLW  00
13AA:  RETLW  00
13AB:  RETLW  00
13AC:  RETLW  00
13AD:  RETLW  00
13AE:  RETLW  00
13AF:  RETLW  00
13B0:  RETLW  00
13B1:  RETLW  00
13B2:  RETLW  00
13B3:  RETLW  01
13B4:  RETLW  0F
13B5:  RETLW  1A
13B6:  RETLW  18
13B7:  RETLW  32
13B8:  RETLW  30
13B9:  RETLW  18
13BA:  RETLW  1E
13BB:  RETLW  1E
13BC:  RETLW  12
13BD:  RETLW  10
13BE:  RETLW  1E
13BF:  RETLW  0F
13C0:  RETLW  01
13C1:  RETLW  00
13C2:  RETLW  00
13C3:  RETLW  00
13C4:  RETLW  00
13C5:  RETLW  00
13C6:  RETLW  00
13C7:  RETLW  00
13C8:  RETLW  00
13C9:  RETLW  00
13CA:  RETLW  00
13CB:  RETLW  00
13CC:  RETLW  00
13CD:  RETLW  00
13CE:  RETLW  00
13CF:  RETLW  00
13D0:  RETLW  00
13D1:  RETLW  00
13D2:  RETLW  00
13D3:  RETLW  00
13D4:  RETLW  00
13D5:  RETLW  00
13D6:  RETLW  00
13D7:  RETLW  00
13D8:  RETLW  00
13D9:  RETLW  00
13DA:  RETLW  00
13DB:  RETLW  00
13DC:  RETLW  00
13DD:  RETLW  00
13DE:  RETLW  00
13DF:  RETLW  00
13E0:  RETLW  00
13E1:  RETLW  00
13E2:  RETLW  00
13E3:  RETLW  00
13E4:  RETLW  00
13E5:  RETLW  00
13E6:  RETLW  00
13E7:  RETLW  00
13E8:  RETLW  00
13E9:  RETLW  00
13EA:  RETLW  00
13EB:  RETLW  00
13EC:  RETLW  00
13ED:  RETLW  00
13EE:  RETLW  00
13EF:  RETLW  00
13F0:  RETLW  00
13F1:  RETLW  00
13F2:  RETLW  00
13F3:  RETLW  00
13F4:  RETLW  00
13F5:  RETLW  00
13F6:  RETLW  00
13F7:  RETLW  00
13F8:  RETLW  00
13F9:  RETLW  00
13FA:  RETLW  00
13FB:  RETLW  00
13FC:  RETLW  00
13FD:  RETLW  00
13FE:  RETLW  00
13FF:  RETLW  00
1400:  RETLW  00
1401:  RETLW  00
1402:  RETLW  00
1403:  RETLW  00
1404:  RETLW  00
1405:  RETLW  00
1406:  RETLW  00
1407:  RETLW  00
1408:  RETLW  00
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(clock=4M) 
*
05FB:  MOVLW  34
05FC:  MOVWF  04
05FD:  BCF    03.7
05FE:  MOVF   00,W
05FF:  BTFSC  03.2
0600:  GOTO   60F
0601:  MOVLW  01
0602:  MOVWF  78
0603:  CLRF   77
0604:  DECFSZ 77,F
0605:  GOTO   604
0606:  DECFSZ 78,F
0607:  GOTO   603
0608:  MOVLW  4A
0609:  MOVWF  77
060A:  DECFSZ 77,F
060B:  GOTO   60A
060C:  GOTO   60D
060D:  DECFSZ 00,F
060E:  GOTO   601
060F:  RETURN
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
....................  
.................... #define GLCD_CS1     PIN_B0   
.................... #define GLCD_CS2     PIN_B1  
.................... #define GLCD_DI      PIN_B2   
.................... #define GLCD_RW      PIN_B3  
.................... #define GLCD_E       PIN_B4   
.................... #define GLCD_RST     PIN_B5   
.................... #define xOffSet 25 
.................... #define SCREEN_WIDTH 100 
.................... #define SCREEN_HEIGHT 100 
....................  
.................... #include <HDM64GS12.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
06A6:  BSF    03.5
06A7:  BCF    06.5
06A8:  BCF    03.5
06A9:  BSF    06.5
....................    output_low(GLCD_E); 
06AA:  BSF    03.5
06AB:  BCF    06.4
06AC:  BCF    03.5
06AD:  BCF    06.4
....................    output_low(GLCD_CS1); 
06AE:  BSF    03.5
06AF:  BCF    06.0
06B0:  BCF    03.5
06B1:  BCF    06.0
....................    output_low(GLCD_CS2); 
06B2:  BSF    03.5
06B3:  BCF    06.1
06B4:  BCF    03.5
06B5:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
06B6:  BSF    03.5
06B7:  BCF    06.2
06B8:  BCF    03.5
06B9:  BCF    06.2
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
06BA:  CLRF   4B
06BB:  MOVLW  C0
06BC:  MOVWF  4C
06BD:  CALL   610
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
06BE:  MOVLW  01
06BF:  MOVWF  4B
06C0:  MOVLW  C0
06C1:  MOVWF  4C
06C2:  CALL   610
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
06C3:  CLRF   4B
06C4:  MOVLW  40
06C5:  MOVWF  4C
06C6:  CALL   610
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
06C7:  MOVLW  01
06C8:  MOVWF  4B
06C9:  MOVLW  40
06CA:  MOVWF  4C
06CB:  CALL   610
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
06CC:  CLRF   4B
06CD:  MOVLW  B8
06CE:  MOVWF  4C
06CF:  CALL   610
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
06D0:  MOVLW  01
06D1:  MOVWF  4B
06D2:  MOVLW  B8
06D3:  MOVWF  4C
06D4:  CALL   610
....................  
....................    if(mode == ON) 
06D5:  DECFSZ 33,W
06D6:  GOTO   6E1
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
06D7:  CLRF   4B
06D8:  MOVLW  3F
06D9:  MOVWF  4C
06DA:  CALL   610
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
06DB:  MOVLW  01
06DC:  MOVWF  4B
06DD:  MOVLW  3F
06DE:  MOVWF  4C
06DF:  CALL   610
....................    } 
06E0:  GOTO   6EA
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
06E1:  CLRF   4B
06E2:  MOVLW  3E
06E3:  MOVWF  4C
06E4:  CALL   610
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
06E5:  MOVLW  01
06E6:  MOVWF  4B
06E7:  MOVLW  3E
06E8:  MOVWF  4C
06E9:  CALL   610
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
06EA:  CLRF   3B
06EB:  CALL   660
....................  
....................    #ifdef FAST_GLCD 
06EC:  BSF    0A.3
06ED:  BCF    0A.4
06EE:  GOTO   606 (RETURN)
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
071C:  BCF    48.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
071D:  MOVF   44,W
071E:  SUBLW  3F
071F:  BTFSC  03.0
0720:  GOTO   724
....................    { 
....................       x -= 64; 
0721:  MOVLW  40
0722:  SUBWF  44,F
....................       side = GLCD_RIGHT; 
0723:  BSF    48.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
0724:  BSF    03.5
0725:  BCF    06.2
0726:  BCF    03.5
0727:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
0728:  BCF    44.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
0729:  BSF    44.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
072A:  MOVLW  00
072B:  BTFSC  48.0
072C:  MOVLW  01
072D:  MOVWF  49
072E:  MOVWF  4B
072F:  MOVF   44,W
0730:  MOVWF  4C
0731:  CALL   610
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
0732:  MOVLW  00
0733:  BTFSC  48.0
0734:  MOVLW  01
0735:  MOVWF  49
0736:  RRF    45,W
0737:  MOVWF  77
0738:  RRF    77,F
0739:  RRF    77,F
073A:  MOVLW  1F
073B:  ANDWF  77,F
073C:  MOVF   77,W
073D:  ANDLW  BF
073E:  IORLW  B8
073F:  MOVWF  4A
0740:  MOVF   49,W
0741:  MOVWF  4B
0742:  MOVF   4A,W
0743:  MOVWF  4C
0744:  CALL   610
....................    output_high(GLCD_DI);                        // Set for data 
0745:  BSF    03.5
0746:  BCF    06.2
0747:  BCF    03.5
0748:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
0749:  MOVLW  00
074A:  BTFSC  48.0
074B:  MOVLW  01
074C:  MOVWF  49
074D:  MOVWF  4A
074E:  CALL   6EF
....................    data = glcd_readByte(side);                  //  at new address 
074F:  MOVLW  00
0750:  BTFSC  48.0
0751:  MOVLW  01
0752:  MOVWF  49
0753:  MOVWF  4A
0754:  CALL   6EF
0755:  MOVF   78,W
0756:  MOVWF  47
....................  
....................    if(color == ON) 
0757:  DECFSZ 46,W
0758:  GOTO   769
....................       bit_set(data, y%8);        // Turn the pixel on 
0759:  MOVF   45,W
075A:  ANDLW  07
075B:  MOVWF  49
075C:  MOVLW  01
075D:  MOVWF  77
075E:  MOVF   49,W
075F:  MOVWF  78
0760:  BTFSC  03.2
0761:  GOTO   766
0762:  BCF    03.0
0763:  RLF    77,F
0764:  DECFSZ 78,F
0765:  GOTO   762
0766:  MOVF   77,W
0767:  IORWF  47,F
0768:  GOTO   779
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
0769:  MOVF   45,W
076A:  ANDLW  07
076B:  MOVWF  49
076C:  MOVLW  01
076D:  MOVWF  77
076E:  MOVF   49,W
076F:  MOVWF  78
0770:  BTFSC  03.2
0771:  GOTO   776
0772:  BCF    03.0
0773:  RLF    77,F
0774:  DECFSZ 78,F
0775:  GOTO   772
0776:  MOVF   77,W
0777:  XORLW  FF
0778:  ANDWF  47,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
0779:  BSF    03.5
077A:  BCF    06.2
077B:  BCF    03.5
077C:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
077D:  MOVLW  00
077E:  BTFSC  48.0
077F:  MOVLW  01
0780:  MOVWF  49
0781:  MOVWF  4B
0782:  MOVF   44,W
0783:  MOVWF  4C
0784:  CALL   610
....................    output_high(GLCD_DI);         // Set for data 
0785:  BSF    03.5
0786:  BCF    06.2
0787:  BCF    03.5
0788:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
0789:  MOVLW  00
078A:  BTFSC  48.0
078B:  MOVLW  01
078C:  MOVWF  49
078D:  MOVWF  4B
078E:  MOVF   47,W
078F:  MOVWF  4C
0790:  CALL   610
0791:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0660:  CLRF   3C
0661:  MOVF   3C,W
0662:  SUBLW  07
0663:  BTFSS  03.0
0664:  GOTO   6A5
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0665:  BSF    03.5
0666:  BCF    06.2
0667:  BCF    03.5
0668:  BCF    06.2
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
0669:  CLRF   4B
066A:  MOVLW  40
066B:  MOVWF  4C
066C:  CALL   610
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
066D:  MOVLW  01
066E:  MOVWF  4B
066F:  MOVLW  40
0670:  MOVWF  4C
0671:  CALL   610
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0672:  MOVF   3C,W
0673:  IORLW  B8
0674:  MOVWF  3E
0675:  CLRF   4B
0676:  MOVF   3E,W
0677:  MOVWF  4C
0678:  CALL   610
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
0679:  MOVF   3C,W
067A:  IORLW  B8
067B:  MOVWF  3E
067C:  MOVLW  01
067D:  MOVWF  4B
067E:  MOVF   3E,W
067F:  MOVWF  4C
0680:  CALL   610
....................       output_high(GLCD_DI);                     // Set for data 
0681:  BSF    03.5
0682:  BCF    06.2
0683:  BCF    03.5
0684:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
0685:  CLRF   3D
0686:  MOVF   3D,W
0687:  SUBLW  3F
0688:  BTFSS  03.0
0689:  GOTO   6A3
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
068A:  MOVLW  FF
068B:  MOVWF  44
068C:  MOVF   3B,W
068D:  MOVWF  45
068E:  CALL   63B
068F:  MOVF   78,W
0690:  MOVWF  3E
0691:  CLRF   4B
0692:  MOVF   78,W
0693:  MOVWF  4C
0694:  CALL   610
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
0695:  MOVLW  FF
0696:  MOVWF  44
0697:  MOVF   3B,W
0698:  MOVWF  45
0699:  CALL   63B
069A:  MOVF   78,W
069B:  MOVWF  3E
069C:  MOVLW  01
069D:  MOVWF  4B
069E:  MOVF   78,W
069F:  MOVWF  4C
06A0:  CALL   610
06A1:  INCF   3D,F
06A2:  GOTO   686
....................       } 
06A3:  INCF   3C,F
06A4:  GOTO   661
....................    } 
06A5:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
0610:  MOVLW  00
0611:  BSF    03.5
0612:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
0613:  BCF    06.3
0614:  BCF    03.5
0615:  BCF    06.3
....................  
.................... 	 if(side)                   // Choose which side to write to 
0616:  MOVF   4B,F
0617:  BTFSC  03.2
0618:  GOTO   61E
....................       output_high(GLCD_CS2); 
0619:  BSF    03.5
061A:  BCF    06.1
061B:  BCF    03.5
061C:  BSF    06.1
061D:  GOTO   622
....................    else 
....................       output_high(GLCD_CS1); 
061E:  BSF    03.5
061F:  BCF    06.0
0620:  BCF    03.5
0621:  BSF    06.0
....................  
.................... 	 delay_us(1); 
0622:  NOP
....................  
....................    output_d(data);            // Put the data on the port 
0623:  BSF    03.5
0624:  CLRF   08
0625:  BCF    03.5
0626:  MOVF   4C,W
0627:  MOVWF  08
....................    delay_us(1); 
0628:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
0629:  BSF    03.5
062A:  BCF    06.4
062B:  BCF    03.5
062C:  BSF    06.4
....................    delay_us(1); 
062D:  NOP
....................    output_low(GLCD_E); 
062E:  BSF    03.5
062F:  BCF    06.4
0630:  BCF    03.5
0631:  BCF    06.4
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
0632:  BSF    03.5
0633:  BCF    06.0
0634:  BCF    03.5
0635:  BCF    06.0
....................    output_low(GLCD_CS2); 
0636:  BSF    03.5
0637:  BCF    06.1
0638:  BCF    03.5
0639:  BCF    06.1
063A:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
*
06EF:  MOVLW  FF
06F0:  BSF    03.5
06F1:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
06F2:  BCF    06.3
06F3:  BCF    03.5
06F4:  BSF    06.3
....................  
....................    if(side)                   // Choose which side to write to 
06F5:  MOVF   4A,F
06F6:  BTFSC  03.2
06F7:  GOTO   6FD
....................       output_high(GLCD_CS2); 
06F8:  BSF    03.5
06F9:  BCF    06.1
06FA:  BCF    03.5
06FB:  BSF    06.1
06FC:  GOTO   701
....................    else 
....................       output_high(GLCD_CS1); 
06FD:  BSF    03.5
06FE:  BCF    06.0
06FF:  BCF    03.5
0700:  BSF    06.0
....................  
....................    delay_us(1); 
0701:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
0702:  BSF    03.5
0703:  BCF    06.4
0704:  BCF    03.5
0705:  BSF    06.4
....................    delay_us(1); 
0706:  NOP
....................    data = input_d();          // Get the data from the display's output register 
0707:  MOVLW  FF
0708:  BSF    03.5
0709:  MOVWF  08
070A:  BCF    03.5
070B:  MOVF   08,W
070C:  MOVWF  4B
....................    output_low(GLCD_E); 
070D:  BSF    03.5
070E:  BCF    06.4
070F:  BCF    03.5
0710:  BCF    06.4
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
0711:  BSF    03.5
0712:  BCF    06.0
0713:  BCF    03.5
0714:  BCF    06.0
....................    output_low(GLCD_CS2); 
0715:  BSF    03.5
0716:  BCF    06.1
0717:  BCF    03.5
0718:  BCF    06.1
....................    return data;               // Return the read data 
0719:  MOVF   4B,W
071A:  MOVWF  78
071B:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
0C09:  MOVF   36,W
0C0A:  MOVWF  7A
0C0B:  MOVF   35,W
0C0C:  MOVWF  04
0C0D:  BCF    03.7
0C0E:  BTFSC  7A.0
0C0F:  BSF    03.7
0C10:  MOVF   00,F
0C11:  BTFSC  03.2
0C12:  GOTO   4F0
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0C13:  MOVF   36,W
0C14:  MOVWF  7A
0C15:  MOVF   35,W
0C16:  MOVWF  04
0C17:  BCF    03.7
0C18:  BTFSC  7A.0
0C19:  BSF    03.7
0C1A:  MOVF   00,W
0C1B:  SUBLW  52
0C1C:  BTFSS  03.0
0C1D:  GOTO   440
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
0C1E:  MOVF   36,W
0C1F:  MOVWF  7A
0C20:  MOVF   35,W
0C21:  MOVWF  04
0C22:  BCF    03.7
0C23:  BTFSC  7A.0
0C24:  BSF    03.7
0C25:  MOVLW  20
0C26:  SUBWF  00,W
0C27:  MOVWF  43
0C28:  MOVWF  44
0C29:  MOVLW  05
0C2A:  MOVWF  45
0C2B:  BCF    0A.3
0C2C:  CALL   63B
0C2D:  BSF    0A.3
0C2E:  MOVF   78,W
0C2F:  MOVWF  42
0C30:  MOVWF  78
0C31:  MOVLW  05
0C32:  MOVWF  77
0C33:  MOVLW  3D
0C34:  MOVWF  04
0C35:  BCF    03.7
0C36:  MOVF   78,W
0C37:  BCF    0A.3
0C38:  CALL   004
0C39:  BSF    0A.3
0C3A:  MOVWF  00
0C3B:  INCF   78,F
0C3C:  INCF   04,F
0C3D:  DECFSZ 77,F
0C3E:  GOTO   436
0C3F:  GOTO   472
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
0C40:  MOVF   36,W
0C41:  MOVWF  7A
0C42:  MOVF   35,W
0C43:  MOVWF  04
0C44:  BCF    03.7
0C45:  BTFSC  7A.0
0C46:  BSF    03.7
0C47:  MOVF   00,W
0C48:  SUBLW  7E
0C49:  BTFSS  03.0
0C4A:  GOTO   46D
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
0C4B:  MOVF   36,W
0C4C:  MOVWF  7A
0C4D:  MOVF   35,W
0C4E:  MOVWF  04
0C4F:  BCF    03.7
0C50:  BTFSC  7A.0
0C51:  BSF    03.7
0C52:  MOVLW  53
0C53:  SUBWF  00,W
0C54:  MOVWF  43
0C55:  MOVWF  44
0C56:  MOVLW  05
0C57:  MOVWF  45
0C58:  BCF    0A.3
0C59:  CALL   63B
0C5A:  BSF    0A.3
0C5B:  MOVF   78,W
0C5C:  MOVWF  42
0C5D:  MOVWF  78
0C5E:  MOVLW  05
0C5F:  MOVWF  77
0C60:  MOVLW  3D
0C61:  MOVWF  04
0C62:  BCF    03.7
0C63:  MOVF   78,W
0C64:  BCF    0A.3
0C65:  CALL   10A
0C66:  BSF    0A.3
0C67:  MOVWF  00
0C68:  INCF   78,F
0C69:  INCF   04,F
0C6A:  DECFSZ 77,F
0C6B:  GOTO   463
0C6C:  GOTO   472
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
0C6D:  CLRF   3D
0C6E:  CLRF   3E
0C6F:  CLRF   3F
0C70:  CLRF   40
0C71:  CLRF   41
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
0C72:  MOVF   36,W
0C73:  MOVWF  7A
0C74:  MOVF   35,W
0C75:  MOVWF  04
0C76:  BCF    03.7
0C77:  BTFSC  7A.0
0C78:  BSF    03.7
0C79:  MOVF   00,W
0C7A:  XORLW  0A
0C7B:  BTFSC  03.2
0C7C:  GOTO   481
0C7D:  XORLW  07
0C7E:  BTFSC  03.2
0C7F:  GOTO   48C
0C80:  GOTO   48E
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
0C81:  MOVLW  07
0C82:  MOVWF  44
0C83:  MOVF   37,W
0C84:  MOVWF  45
0C85:  BCF    0A.3
0C86:  CALL   63B
0C87:  BSF    0A.3
0C88:  MOVLW  01
0C89:  ADDWF  78,W
0C8A:  ADDWF  34,F
....................             continue; 
0C8B:  GOTO   4EB
....................          case '\r': 
....................             x = 0; 
0C8C:  CLRF   33
....................             continue; 
0C8D:  GOTO   4EB
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
0C8E:  MOVLW  05
0C8F:  MOVWF  44
0C90:  MOVF   37,W
0C91:  MOVWF  45
0C92:  BCF    0A.3
0C93:  CALL   63B
0C94:  BSF    0A.3
0C95:  MOVF   78,W
0C96:  ADDWF  33,W
0C97:  SUBLW  7F
0C98:  BTFSC  03.0
0C99:  GOTO   4A5
....................       { 
....................          x = 0;                           // Set x at far left position 
0C9A:  CLRF   33
....................          y += 7*size + 1;                 // Set y at next position down 
0C9B:  MOVLW  07
0C9C:  MOVWF  44
0C9D:  MOVF   37,W
0C9E:  MOVWF  45
0C9F:  BCF    0A.3
0CA0:  CALL   63B
0CA1:  BSF    0A.3
0CA2:  MOVLW  01
0CA3:  ADDWF  78,W
0CA4:  ADDWF  34,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
0CA5:  CLRF   39
0CA6:  MOVF   39,W
0CA7:  SUBLW  04
0CA8:  BTFSS  03.0
0CA9:  GOTO   4EB
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
0CAA:  CLRF   3A
0CAB:  MOVF   3A,W
0CAC:  SUBLW  06
0CAD:  BTFSS  03.0
0CAE:  GOTO   4E7
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
0CAF:  MOVLW  3D
0CB0:  ADDWF  39,W
0CB1:  MOVWF  04
0CB2:  BCF    03.7
0CB3:  MOVF   00,W
0CB4:  MOVWF  42
0CB5:  MOVWF  77
0CB6:  MOVF   3A,W
0CB7:  MOVWF  78
0CB8:  BTFSC  03.2
0CB9:  GOTO   4BE
0CBA:  BCF    03.0
0CBB:  RRF    77,F
0CBC:  DECFSZ 78,F
0CBD:  GOTO   4BA
0CBE:  BTFSS  77.0
0CBF:  GOTO   4E5
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0CC0:  CLRF   3B
0CC1:  MOVF   37,W
0CC2:  SUBWF  3B,W
0CC3:  BTFSC  03.0
0CC4:  GOTO   4E5
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0CC5:  CLRF   3C
0CC6:  MOVF   37,W
0CC7:  SUBWF  3C,W
0CC8:  BTFSC  03.0
0CC9:  GOTO   4E3
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
0CCA:  MOVF   3C,W
0CCB:  ADDWF  33,W
0CCC:  MOVWF  42
0CCD:  MOVF   3A,W
0CCE:  MOVWF  44
0CCF:  MOVF   37,W
0CD0:  MOVWF  45
0CD1:  BCF    0A.3
0CD2:  CALL   63B
0CD3:  BSF    0A.3
0CD4:  MOVF   78,W
0CD5:  ADDWF  34,W
0CD6:  ADDWF  3B,W
0CD7:  MOVWF  43
0CD8:  MOVF   42,W
0CD9:  MOVWF  44
0CDA:  MOVF   43,W
0CDB:  MOVWF  45
0CDC:  MOVF   38,W
0CDD:  MOVWF  46
0CDE:  BCF    0A.3
0CDF:  CALL   71C
0CE0:  BSF    0A.3
0CE1:  INCF   3C,F
0CE2:  GOTO   4C6
....................                   } 
0CE3:  INCF   3B,F
0CE4:  GOTO   4C1
....................                } 
....................             } 
0CE5:  INCF   3A,F
0CE6:  GOTO   4AB
....................          } 
0CE7:  INCF   39,F
0CE8:  MOVF   37,W
0CE9:  ADDWF  33,F
0CEA:  GOTO   4A6
....................       } 
0CEB:  INCF   35,F
0CEC:  BTFSC  03.2
0CED:  INCF   36,F
0CEE:  INCF   33,F
0CEF:  GOTO   409
....................    } 
0CF0:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................   
.................... const unsigned char image1[] = { 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
.................... 0x7F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
.................... 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x7F, 0x7F, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 
.................... 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x07, 0x01, 
.................... 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xE0, 0x60, 0x60, 0x20, 0x30, 0x30, 0x30, 
.................... 0x30, 0x30, 0x30, 0x30, 0x30, 0x60, 0x60, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x03, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 
.................... 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x80, 0xE0, 0xE0, 0xF0, 0xF8, 
.................... 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 
.................... 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xE7, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 
.................... 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0x7F, 0x3F, 0x1F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x03, 0x07, 0x0F, 0x1F, 
.................... 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xF8, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xE0, 0xF0, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 
.................... 0x1F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x80, 0xC0, 0xE0, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xE0, 0xC0, 
.................... 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x02, 0x06, 0x06, 0x04, 0x04, 
.................... 0x04, 0x04, 0x04, 0x06, 0x06, 0x02, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x80, 0xC0, 0xE0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 
.................... 0x0F, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 
.................... 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
.................... 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x9F, 0x8F, 0x8F, 0x87, 0x83, 0x81, 
.................... 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
.................... 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
.................... 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
.................... 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF 
.................... }; 
....................  
.................... const unsigned char image2[] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81, 0xEF, 0xDF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
.................... 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0x78, 0x38, 0x38, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 
.................... 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x8E, 0xCE, 0x6E, 0x6E, 0x2E, 
.................... 0x8F, 0xDC, 0xBC, 0xFC, 0xD4, 0x14, 0x14, 0x16, 0x16, 0x06, 0x0E, 0x0C, 0x0C, 0x0C, 0x04, 0x0C, 
.................... 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x40, 0x40, 0x80, 0x88, 0x88, 0x0C, 0x04, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
.................... 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 
.................... 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x18, 0x00, 0x00, 
.................... 0x1F, 0x1F, 0x1F, 0x2F, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x60, 0x70, 0xF6, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF0, 0x80, 0x00, 0x00, 
.................... 0x00, 0x00, 0xE2, 0xC2, 0xC6, 0x87, 0x07, 0x0F, 0x1E, 0x1E, 0x3E, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 
.................... 0xE0, 0xF0, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x80, 0x00, 
.................... 0x00, 0x00, 0x03, 0x07, 0x07, 0x83, 0x80, 0x80, 0xC0, 0xC0, 0xF0, 0x7B, 0x3F, 0x3F, 0x0F, 0x03, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 
.................... 0xFF, 0x3F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 
.................... 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFE, 0xF8, 0xF0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x86, 0x90, 
.................... 0x80, 0x80, 0x81, 0x80, 0x8F, 0x89, 0xC1, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 
.................... 0x30, 0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
.................... 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 
.................... 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
.................... 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x3F, 0x7F, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
.................... }; 
....................  
.................... const unsigned char image3 [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
.................... 0x80, 0x80, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xE0, 0x30, 0x18, 0xCC, 0xEC, 
.................... 0x2C, 0x28, 0x58, 0xB0, 0x70, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0x08, 0x88, 
.................... 0x78, 0x30, 0x20, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFE, 0xFF, 0xE7, 
.................... 0x07, 0x03, 0x03, 0x03, 0x03, 0xFB, 0xFB, 0xE7, 0x07, 0x03, 0x07, 0x07, 0x04, 0x00, 0x0F, 0x0F, 
.................... 0x08, 0x30, 0x30, 0x20, 0x11, 0x14, 0x03, 0x0F, 0x4C, 0x48, 0x08, 0x18, 0x10, 0x30, 0xE0, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0D, 0x19, 0x19, 0xF0, 
.................... 0xF0, 0x00, 0x00, 0xB1, 0x3F, 0xFC, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x80, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
.................... 0x00, 0x80, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x10, 0x10, 0x00, 
.................... 0x00, 0x00, 0x00, 0x20, 0x20, 0x18, 0x10, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x10, 0xC0, 0x03, 
.................... 0x1E, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 
.................... 0xC1, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x90, 0x24, 
.................... 0x08, 0xC2, 0xE1, 0xF0, 0x70, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 
.................... 0x00, 0x10, 0x20, 0x00, 0x00, 0x80, 0x80, 0x80, 0x60, 0x10, 0x08, 0xC0, 0x34, 0x02, 0x00, 0x00, 
.................... 0x00, 0x00, 0x07, 0x0E, 0x18, 0x30, 0x20, 0x30, 0x70, 0x78, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xF7, 0xF7, 0xE3, 0xE3, 0xE1, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 
.................... 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0xF8, 0xF9, 0x01, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC3, 0xC0, 
.................... 0xC0, 0x83, 0x88, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x1C, 0x02, 0x01, 0x00, 0x00, 0x00, 0x09, 0x06, 0x06, 0x01, 0x80, 0xC0, 0x60, 0x30, 0x18, 
.................... 0x0C, 0x06, 0x02, 0x06, 0x06, 0x1D, 0x7F, 0xFF, 0xFF, 0xF6, 0xF4, 0xF4, 0xEC, 0xED, 0xD9, 0xD9, 
.................... 0xBB, 0xBB, 0x7B, 0x7F, 0x7F, 0x77, 0x67, 0x47, 0x0F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 
.................... 0x60, 0x60, 0x60, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
.................... 0x3F, 0xFF, 0xFF, 0x3F, 0x1F, 0x9F, 0xCF, 0x67, 0x37, 0x13, 0x03, 0x00, 0x08, 0x08, 0x18, 0x80, 
.................... 0xE0, 0x30, 0x30, 0x10, 0x10, 0x18, 0x08, 0x0C, 0x06, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 
.................... 0xF3, 0x03, 0x07, 0x07, 0x06, 0x0E, 0x0C, 0x1C, 0x1C, 0x3F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 0x0C, 
.................... 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 
.................... 0x03, 0x03, 0x02, 0x00, 0x0E, 0x1D, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0x3F, 0x60, 0x60, 0x47, 0x4F, 0x48, 0x68, 0x60, 0x34, 0x30, 0x18, 0x0C, 0x0E, 0x07, 0x03, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x60, 0x60, 0x60, 0x60, 
.................... 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0xDC, 0x9E, 0xDF, 0x7F, 0x7F, 0x3F, 0x1F, 0x0F, 0x03, 
.................... 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
.................... 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x1A, 0x18, 0x32, 0x30, 
.................... 0x18, 0x1E, 0x1E, 0x12, 0x10, 0x1E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 sevenSegment[4] = {63 ,6, 91, 79};  
.................... char currentImage = 0; 
.................... unsigned int16 i; 
.................... unsigned char imagesSelected = 0, startSlide = 0; 
....................  
.................... void glcd_image(int inverse); 
....................  
.................... void main() 
*
0DAF:  CLRF   20
0DB0:  CLRF   23
0DB1:  CLRF   24
0DB2:  MOVLW  FF
0DB3:  MOVWF  25
0DB4:  BSF    03.5
0DB5:  BSF    1F.0
0DB6:  BSF    1F.1
0DB7:  BSF    1F.2
0DB8:  BCF    1F.3
0DB9:  MOVLW  07
0DBA:  MOVWF  1C
0DBB:  BCF    03.7
0DBC:  MOVLW  1F
0DBD:  ANDWF  03,F
.................... { 
....................     
....................    char txt1[]="Starting...."; 
0DBE:  MOVLW  53
0DBF:  BCF    03.5
0DC0:  MOVWF  26
0DC1:  MOVLW  74
0DC2:  MOVWF  27
0DC3:  MOVLW  61
0DC4:  MOVWF  28
0DC5:  MOVLW  72
0DC6:  MOVWF  29
0DC7:  MOVLW  74
0DC8:  MOVWF  2A
0DC9:  MOVLW  69
0DCA:  MOVWF  2B
0DCB:  MOVLW  6E
0DCC:  MOVWF  2C
0DCD:  MOVLW  67
0DCE:  MOVWF  2D
0DCF:  MOVLW  2E
0DD0:  MOVWF  2E
0DD1:  MOVWF  2F
0DD2:  MOVWF  30
0DD3:  MOVWF  31
0DD4:  CLRF   32
....................     
....................    set_tris_a(0x08); //initializing port A for button and adc reader 
0DD5:  MOVLW  08
0DD6:  BSF    03.5
0DD7:  MOVWF  05
....................    set_tris_c(0x00); //initializing port C for 7 seg display 
0DD8:  MOVLW  00
0DD9:  MOVWF  07
0DDA:  BCF    03.5
0DDB:  MOVWF  25
....................    output_c(sevenSegment[currentImage]); 
0DDC:  MOVF   20,W
0DDD:  BCF    0A.3
0DDE:  CALL   5F3
0DDF:  BSF    0A.3
0DE0:  MOVWF  33
0DE1:  MOVLW  00
0DE2:  MOVWF  25
0DE3:  BSF    03.5
0DE4:  CLRF   07
0DE5:  BCF    03.5
0DE6:  MOVF   33,W
0DE7:  MOVWF  07
....................     
....................    //setting up adc 
....................    setup_adc(ADC_CLOCK_DIV_32); 
0DE8:  BSF    03.5
0DE9:  BCF    1F.6
0DEA:  BCF    03.5
0DEB:  BCF    1F.6
0DEC:  BSF    1F.7
0DED:  BSF    03.5
0DEE:  BSF    1F.7
0DEF:  BCF    03.5
0DF0:  BSF    1F.0
....................    setup_adc_ports(AN0); 
0DF1:  BSF    03.5
0DF2:  BCF    1F.0
0DF3:  BSF    1F.1
0DF4:  BSF    1F.2
0DF5:  BSF    1F.3
....................    set_adc_channel(0); 
0DF6:  MOVLW  00
0DF7:  MOVWF  78
0DF8:  BCF    03.5
0DF9:  MOVF   1F,W
0DFA:  ANDLW  C7
0DFB:  IORWF  78,W
0DFC:  MOVWF  1F
....................    delay_ms(100); 
0DFD:  MOVLW  64
0DFE:  MOVWF  34
0DFF:  BCF    0A.3
0E00:  CALL   5FB
0E01:  BSF    0A.3
....................     
....................    //initializing glcd 
....................    glcd_init(ON); 
0E02:  MOVLW  01
0E03:  MOVWF  33
0E04:  BCF    0A.3
0E05:  GOTO   6A6
0E06:  BSF    0A.3
....................     
....................    glcd_text57(23,15,txt1,1,ON); 
0E07:  MOVLW  17
0E08:  MOVWF  33
0E09:  MOVLW  0F
0E0A:  MOVWF  34
0E0B:  CLRF   36
0E0C:  MOVLW  26
0E0D:  MOVWF  35
0E0E:  MOVLW  01
0E0F:  MOVWF  37
0E10:  MOVWF  38
0E11:  CALL   409
....................    delay_ms(500); 
0E12:  MOVLW  02
0E13:  MOVWF  33
0E14:  MOVLW  FA
0E15:  MOVWF  34
0E16:  BCF    0A.3
0E17:  CALL   5FB
0E18:  BSF    0A.3
0E19:  DECFSZ 33,F
0E1A:  GOTO   614
....................     
....................    glcd_fillScreen(ON); 
0E1B:  MOVLW  01
0E1C:  MOVWF  3B
0E1D:  BCF    0A.3
0E1E:  CALL   660
0E1F:  BSF    0A.3
....................    delay_ms(500); 
0E20:  MOVLW  02
0E21:  MOVWF  33
0E22:  MOVLW  FA
0E23:  MOVWF  34
0E24:  BCF    0A.3
0E25:  CALL   5FB
0E26:  BSF    0A.3
0E27:  DECFSZ 33,F
0E28:  GOTO   622
....................     
....................    glcd_text57(23,15,txt1,1,OFF); 
0E29:  MOVLW  17
0E2A:  MOVWF  33
0E2B:  MOVLW  0F
0E2C:  MOVWF  34
0E2D:  CLRF   36
0E2E:  MOVLW  26
0E2F:  MOVWF  35
0E30:  MOVLW  01
0E31:  MOVWF  37
0E32:  CLRF   38
0E33:  CALL   409
....................    delay_ms(500); 
0E34:  MOVLW  02
0E35:  MOVWF  33
0E36:  MOVLW  FA
0E37:  MOVWF  34
0E38:  BCF    0A.3
0E39:  CALL   5FB
0E3A:  BSF    0A.3
0E3B:  DECFSZ 33,F
0E3C:  GOTO   636
....................     
....................    glcd_fillScreen(OFF); 
0E3D:  CLRF   3B
0E3E:  BCF    0A.3
0E3F:  CALL   660
0E40:  BSF    0A.3
....................     
....................    //glcd_text57(23,15,txt1,1,ON); 
....................    //glcd_image(0); 
....................     
....................    while(TRUE) 
....................    { 
....................       //read ADC value  
....................       i = read_adc(); 
0E41:  BSF    1F.2
0E42:  BTFSC  1F.2
0E43:  GOTO   642
0E44:  BSF    03.5
0E45:  MOVF   1E,W
0E46:  BCF    03.5
0E47:  MOVWF  21
0E48:  MOVF   1E,W
0E49:  MOVWF  22
....................       delay_ms(100); 
0E4A:  MOVLW  64
0E4B:  MOVWF  34
0E4C:  BCF    0A.3
0E4D:  CALL   5FB
0E4E:  BSF    0A.3
....................       imagesSelected = i / 50; 
0E4F:  MOVF   22,W
0E50:  MOVWF  34
0E51:  MOVF   21,W
0E52:  MOVWF  33
0E53:  CLRF   36
0E54:  MOVLW  32
0E55:  MOVWF  35
0E56:  BCF    0A.3
0E57:  GOTO   792
0E58:  BSF    0A.3
0E59:  MOVF   78,W
0E5A:  MOVWF  23
....................       output_c(sevenSegment[imagesSelected]); 
0E5B:  MOVF   23,W
0E5C:  BCF    0A.3
0E5D:  CALL   5F3
0E5E:  BSF    0A.3
0E5F:  MOVWF  33
0E60:  MOVLW  00
0E61:  MOVWF  25
0E62:  BSF    03.5
0E63:  CLRF   07
0E64:  BCF    03.5
0E65:  MOVF   33,W
0E66:  MOVWF  07
....................        
....................        
....................       if (input(pin_a3)) 
0E67:  BSF    03.5
0E68:  BSF    05.3
0E69:  BCF    03.5
0E6A:  BTFSS  05.3
0E6B:  GOTO   67D
....................       { 
....................          delay_ms(500); 
0E6C:  MOVLW  02
0E6D:  MOVWF  33
0E6E:  MOVLW  FA
0E6F:  MOVWF  34
0E70:  BCF    0A.3
0E71:  CALL   5FB
0E72:  BSF    0A.3
0E73:  DECFSZ 33,F
0E74:  GOTO   66E
....................          startSlide = startSlide == 0 ? 1 : 0; 
0E75:  MOVF   24,F
0E76:  BTFSS  03.2
0E77:  GOTO   67A
0E78:  MOVLW  01
0E79:  GOTO   67B
0E7A:  MOVLW  00
0E7B:  MOVWF  24
....................          currentImage = 0; 
0E7C:  CLRF   20
....................       } 
....................        
....................       if (startSlide == 1) 
0E7D:  DECFSZ 24,W
0E7E:  GOTO   699
....................       { 
....................          currentImage = currentImage >= imagesSelected ? 0 : currentImage; 
0E7F:  MOVF   23,W
0E80:  SUBWF  20,W
0E81:  BTFSS  03.0
0E82:  GOTO   685
0E83:  MOVLW  00
0E84:  GOTO   686
0E85:  MOVF   20,W
0E86:  MOVWF  20
....................          glcd_fillScreen(ON); 
0E87:  MOVLW  01
0E88:  MOVWF  3B
0E89:  BCF    0A.3
0E8A:  CALL   660
0E8B:  BSF    0A.3
....................          glcd_image(currentImage); 
0E8C:  MOVF   20,W
0E8D:  MOVWF  33
0E8E:  GOTO   4F1
....................          currentImage++; 
0E8F:  INCF   20,F
....................          delay_ms(3000); 
0E90:  MOVLW  0C
0E91:  MOVWF  33
0E92:  MOVLW  FA
0E93:  MOVWF  34
0E94:  BCF    0A.3
0E95:  CALL   5FB
0E96:  BSF    0A.3
0E97:  DECFSZ 33,F
0E98:  GOTO   692
....................          //output_c(sevenSegment[currentImage + 1]); 
....................       } 
0E99:  GOTO   641
....................    } 
.................... } 
....................  
0E9A:  SLEEP
....................  
....................  
.................... void glcd_image(int inverse) 
*
0CF1:  CLRF   38
0CF2:  CLRF   37
0CF3:  MOVLW  80
0CF4:  MOVWF  39
0CF5:  MOVLW  40
0CF6:  MOVWF  3A
.................... { 
....................    unsigned int i, j, k; 
....................    unsigned int16 count = 0; 
....................    int width = 128, height = 64; 
....................     
....................    glcd_fillScreen(OFF); 
0CF7:  CLRF   3B
0CF8:  BCF    0A.3
0CF9:  CALL   660
0CFA:  BSF    0A.3
....................     
....................    if(inverse == 0) 
0CFB:  MOVF   33,F
0CFC:  BTFSS  03.2
0CFD:  GOTO   53B
....................    { 
....................       for (i = 0; i < height; i+=8) 
0CFE:  CLRF   34
0CFF:  MOVF   3A,W
0D00:  SUBWF  34,W
0D01:  BTFSC  03.0
0D02:  GOTO   53A
....................       { 
....................          for (j = 0; j < width; j++) 
0D03:  CLRF   35
0D04:  MOVF   39,W
0D05:  SUBWF  35,W
0D06:  BTFSC  03.0
0D07:  GOTO   537
....................          { 
....................             for (k = 0; k < 8; k++) 
0D08:  CLRF   36
0D09:  MOVF   36,W
0D0A:  SUBLW  07
0D0B:  BTFSS  03.0
0D0C:  GOTO   532
....................             { 
....................                if (-bit_test(image1[count], k)) //0x7f 0x9b 0xb4 
0D0D:  MOVF   38,W
0D0E:  MOVWF  7A
0D0F:  MOVF   37,W
0D10:  BCF    0A.3
0D11:  CALL   1EA
0D12:  BSF    0A.3
0D13:  MOVWF  3B
0D14:  MOVWF  77
0D15:  MOVF   36,W
0D16:  MOVWF  78
0D17:  BTFSC  03.2
0D18:  GOTO   51D
0D19:  BCF    03.0
0D1A:  RRF    77,F
0D1B:  DECFSZ 78,F
0D1C:  GOTO   519
0D1D:  MOVLW  00
0D1E:  BTFSC  77.0
0D1F:  MOVLW  01
0D20:  SUBLW  00
0D21:  XORLW  00
0D22:  BTFSC  03.2
0D23:  GOTO   530
....................                { 
....................                   glcd_pixel(j, i + k, ON); 
0D24:  MOVF   36,W
0D25:  ADDWF  34,W
0D26:  MOVWF  3B
0D27:  MOVF   35,W
0D28:  MOVWF  44
0D29:  MOVF   3B,W
0D2A:  MOVWF  45
0D2B:  MOVLW  01
0D2C:  MOVWF  46
0D2D:  BCF    0A.3
0D2E:  CALL   71C
0D2F:  BSF    0A.3
....................                } 
0D30:  INCF   36,F
0D31:  GOTO   509
....................             } 
....................             count ++; 
0D32:  INCF   37,F
0D33:  BTFSC  03.2
0D34:  INCF   38,F
0D35:  INCF   35,F
0D36:  GOTO   504
....................          } 
0D37:  MOVLW  08
0D38:  ADDWF  34,F
0D39:  GOTO   4FF
....................       } 
....................    } 
0D3A:  GOTO   5AC
....................    else if (inverse == 1) 
0D3B:  DECFSZ 33,W
0D3C:  GOTO   573
....................    { 
....................       for (i = 0; i < height; i+=8) 
0D3D:  CLRF   34
0D3E:  MOVF   3A,W
0D3F:  SUBWF  34,W
0D40:  BTFSC  03.0
0D41:  GOTO   572
....................       { 
....................          for (j = 0; j < width; j++) 
0D42:  CLRF   35
0D43:  MOVF   39,W
0D44:  SUBWF  35,W
0D45:  BTFSC  03.0
0D46:  GOTO   56F
....................          { 
....................             for (k = 0; k < 8; k++) 
0D47:  CLRF   36
0D48:  MOVF   36,W
0D49:  SUBLW  07
0D4A:  BTFSS  03.0
0D4B:  GOTO   56A
....................             { 
....................                if (bit_test(image2[count], k)) 
0D4C:  MOVF   38,W
0D4D:  MOVWF  7A
0D4E:  MOVF   37,W
0D4F:  CALL   000
0D50:  MOVWF  3B
0D51:  MOVWF  77
0D52:  MOVF   36,W
0D53:  MOVWF  78
0D54:  BTFSC  03.2
0D55:  GOTO   55A
0D56:  BCF    03.0
0D57:  RRF    77,F
0D58:  DECFSZ 78,F
0D59:  GOTO   556
0D5A:  BTFSS  77.0
0D5B:  GOTO   568
....................                { 
....................                   glcd_pixel(j, i + k, ON); 
0D5C:  MOVF   36,W
0D5D:  ADDWF  34,W
0D5E:  MOVWF  3B
0D5F:  MOVF   35,W
0D60:  MOVWF  44
0D61:  MOVF   3B,W
0D62:  MOVWF  45
0D63:  MOVLW  01
0D64:  MOVWF  46
0D65:  BCF    0A.3
0D66:  CALL   71C
0D67:  BSF    0A.3
....................                } 
0D68:  INCF   36,F
0D69:  GOTO   548
....................             } 
....................             count ++; 
0D6A:  INCF   37,F
0D6B:  BTFSC  03.2
0D6C:  INCF   38,F
0D6D:  INCF   35,F
0D6E:  GOTO   543
....................          } 
0D6F:  MOVLW  08
0D70:  ADDWF  34,F
0D71:  GOTO   53E
....................       } 
....................    } 
0D72:  GOTO   5AC
....................    else 
....................    { 
....................       for (i = 0; i < height; i+=8) 
0D73:  CLRF   34
0D74:  MOVF   3A,W
0D75:  SUBWF  34,W
0D76:  BTFSC  03.0
0D77:  GOTO   5AC
....................       { 
....................          for (j = 0; j < width; j++) 
0D78:  CLRF   35
0D79:  MOVF   39,W
0D7A:  SUBWF  35,W
0D7B:  BTFSC  03.0
0D7C:  GOTO   5A9
....................          { 
....................             for (k = 0; k < 8; k++) 
0D7D:  CLRF   36
0D7E:  MOVF   36,W
0D7F:  SUBLW  07
0D80:  BTFSS  03.0
0D81:  GOTO   5A4
....................             { 
....................                if (bit_test(image3[count], k)) 
0D82:  MOVF   38,W
0D83:  MOVWF  7A
0D84:  MOVF   37,W
0D85:  BSF    0A.4
0D86:  BCF    0A.3
0D87:  CALL   000
0D88:  BCF    0A.4
0D89:  BSF    0A.3
0D8A:  MOVWF  3B
0D8B:  MOVWF  77
0D8C:  MOVF   36,W
0D8D:  MOVWF  78
0D8E:  BTFSC  03.2
0D8F:  GOTO   594
0D90:  BCF    03.0
0D91:  RRF    77,F
0D92:  DECFSZ 78,F
0D93:  GOTO   590
0D94:  BTFSS  77.0
0D95:  GOTO   5A2
....................                { 
....................                   glcd_pixel(j, i + k, ON); 
0D96:  MOVF   36,W
0D97:  ADDWF  34,W
0D98:  MOVWF  3B
0D99:  MOVF   35,W
0D9A:  MOVWF  44
0D9B:  MOVF   3B,W
0D9C:  MOVWF  45
0D9D:  MOVLW  01
0D9E:  MOVWF  46
0D9F:  BCF    0A.3
0DA0:  CALL   71C
0DA1:  BSF    0A.3
....................                } 
0DA2:  INCF   36,F
0DA3:  GOTO   57E
....................             } 
....................             count ++; 
0DA4:  INCF   37,F
0DA5:  BTFSC  03.2
0DA6:  INCF   38,F
0DA7:  INCF   35,F
0DA8:  GOTO   579
....................          } 
0DA9:  MOVLW  08
0DAA:  ADDWF  34,F
0DAB:  GOTO   574
....................       } 
....................    } 
0DAC:  BSF    0A.3
0DAD:  BCF    0A.4
0DAE:  GOTO   68F (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
